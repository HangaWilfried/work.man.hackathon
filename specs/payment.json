{
  "openapi": "3.0.0",
  "info": {
    "title": "pawaPay Merchant API for Mobile Money",
    "description": "You can get help from our [Discord server](https://discord.gg/qng8y8Y7pm).\n\npawaPay Merchant API allows you to collect and disburse mobile money across Africa. Using our Merchant API, with just a single integration you'll have access to millions of mobile money wallets.\n\n# Introduction\n\n## About mobile money\n\nMobile money is a form of digital money, where instead of a bank account and a card, people get a mobile money wallet connected to their phone number. \nWhen people sign up for a mobile money account with their Mobile Network Operator (MNO), they go through KYC just like with a bank account. \nInstead of ATMs and bank branches, you can put money on your mobile money wallet through an extensive agent network. \nInstead of getting a bank account number/IBAN, your mobile money wallet is identified by your phone number. \nIt allows users to send money to and receive money from other mobile money users, pay their bills, pay merchants online, receive their salary etc.\n\nMobile money wallets have transaction limits like many modern bank accounts and cards. Most important limits are:\n* Number of payments done within a day, week or month.\n* Value of payments done within a day, week or month.\n* Maximum balance of a mobile money wallet.\n\nUsers can get those limits increased by going through extended KYC processes with the MNOs. \n\n## What does a payment look like\n\nMobile money payments are different from classic cards payments. They are more similar to A2A or 3-D Secure enabled card payments. \nSpecifically, user has to explicitly authorise each payment. When a user attempts to pay from their mobile money wallet, they need to enter their mobile money PIN code to authorise the payment. \nThe PIN code is only known by the issuer (MNO) and the owner the mobile money wallet. \nAuthorisation happens between those two parties and the merchant is not involved. \nThe owner of the mobile money wallet always receives an SMS receipt whenever their balance changes.\nThis makes mobile money payments much more secure than classic card payments reducing fraud and chargeback risk to a minimum.\n\nThis has two important implications. \n\nFirst, this expands the technical infrastructure involved in processing every single payment. \nSince the user needs to enter their mobile money PIN code to authorise each payment, both the server infrastructure and the cell network infrastructure are involved in the payment chain. \nThe PIN code is usually requested from the user by sending a USSD message over the cell network and utilising the handsets SIM toolkit to handle user interaction. \nThis gives mobile money incredible accessibility as it works securely on everything from the simplest of push-button handsets all the way to flagship smartphones. \nOn the flip side, there's a lot involved from server infrastructure, internet connectivity, cell networks, USSD gateways etc. \n\nSecond, the user is now part of the processing chain of each transaction. \nA user attempting to initiate a payment on your website or app needs to take out their handset and enter their PIN in a limited amount of time. \nOr they might not find their phone, accidentally close the PIN prompt, forget their PIN code, get a phone call etc. \n\nTo conclude, mobile money is highly accessible and secure. The challenges to ensure high success rates and a great customer experience are different from other payment methods.\n\nWith the pawaPay Merchant API you can easily transact with you customers any way you need:\n* **You can collect money from them**\nMoney will move from the customers mobile money wallet into your account in pawaPay. You can do that with our [Deposits](#section/Deposit-(Collection)) functionality.\n* **You can disburse money to them**\nMoney will move from your account in pawaPay to the customers mobile money wallet. You can do that with our [Payouts](#section/Payout-(Disbursement)) functionality.\n* **You can refund them**\nAlready collected funds will move back from your account in pawaPay to the customers mobile money wallet. You can do that with our [Refunds](#section/Refunds) functionality.\n\n# Implementation\n\nThe pawaPay Merchant API simplifies integrating mobile money into your payment flows. \nIt provides a single standardised API to connect to Mobile Network Operators (MNOs) providing mobile money services across Africa.\nFollowing chapters introduce some important aspects of mobile money and working with financial APIs to help you build a high quality integration that your customers love and is easy to operate.\n\n## MNO stability\n\nAs described in the [Introduction](#section/What-does-a-payment-look-like), mobile money transaction chains are complex. \nThis means that payment services stability needs to be taken into account when implementing a high-quality payment flow. \npawaPay provides multiple solutions to make this easy to manage.\n\nOur 24/7 payment operations team monitors all MNOs on our platform for instability and downtime. We stop accepting payments to those MNOs if the success rate is too low. \nThis information is accessible from our [availability](#operation/availability) endpoint. \nYou can verify before initiating the payment if the MNO is currently experiencing any problems and inform the user before they attempt the payment. \nKnowing that your mobile money provider is currently unavailable is a better customer experience than having your payment fail. \nFailed payments usually take longer to process, leaving the customer waiting for clarity for longer. Read more about our [availability](#operation/availability) endpoint.\n\nFor customer support purposes, information about MNOs availability is also published on our [status page](https://status.pawapay.cloud). \nYou can subscribe to updates over e-mail, slack and other channels to ensure your support team is always informed about any potential problems with the MNOs.\n\nWhen an MNO is experiencing difficulties in successfully processing disbursements, our platform will enqueue them to be processed once the MNO is operational. \nRead more about [enqueued payouts](#section/Payout-(Disbursement)/Enqueued-payouts).\n\nSometimes MNOs systems have degraded performance. \nWhen that happens, the MNOs APIs might have trouble returning the final status of payments. \nOur platform still accepts payments for processing during those times. \nThese payments are reconciled through other means with the MNO using our reconciliation engine.\nThis means that When using pawaPay, all payments are always reconciled to their final status. \nThis process takes a little longer than processing during normal operations.\n\n## Transaction limits\n\nMobile money wallets have different limits for transactions. Most common and relevant are:\n* Maximum amount of deposits/payouts in a day/week/month.\n* Maximum number of deposits/payouts in a day/week/month.\n* Maximum balance of a mobile money wallet.\n\nAll MNOs that you transact with using pawaPay have transaction limits. \nThese are the lowest and highest amounts that can be collected, disbursed or refunded with the specific MNO. \nThey are based on the limits of the most common wallet types of this MNO. \nAs the effective limits are dependent on the specific users transaction history, transaction may still fail due to hitting limits. \n\nFor example, an MNO has a 1,000 GHS maximum deposit amount. \nIn reality the wallet has a limitation of 1,000 GHS total transaction value per day/week/month. \nIf the user has already transacted 500 GHS during this period, a transaction of 700 might still fail.\n\nYou can easily find the transaction limits from our [active configuration](#operation/active_conf) endpoint.\n\n## Asynchronous API\n\nThe pawaPay Merchant API is asynchronous. This is necessary to provide high performance and quality payment infrastructure that is able to process millions of payments every day.\n\nWhen you call any financial endpoint ([payout](#operation/createPayout), [deposit](#operation/createDeposit), [refund](#operation/createRefund)) the response will confirm whether the transaction was __accepted for processing or rejected__. \nReasons for rejecting a transaction might be using the same ID for transaction more than once or the MNO being unavailable at the moment.\n\nIf the response confirms that the payment has been __accepted for processing__, it will take some time for it to process (remember that for deposits, the user needs to enter their PIN on their phone). \nThere are two ways to __find out about the final status__ of a payment.\n\nFirst, you can configure callback URLs in our portal. \nThis will automatically __send a callback to your configured callback URL__ as soon as a payment has reached it's final status. \nYou will have to implement a callback handler that is able to receive calls from our platform and handle them accordingly.\n\nSecond, you can use the corresponding `Get Status and Details` endpoint for the transaction type to periodically __check the status of a payment__.\n\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/658c43eb33a9c46d1453dbd6_API%20docs%20visuals%20-%20Deposit%20with%20pawaPay%20Merchant%20API.jpg\" alt=\"Deposit with pawaPay Merchant API\" />\n\n## Handling callbacks\n\nWhen implementing your callback handler, please consider the following points.\n\n* The endpoint should be __accessible to our platform__. \n  * If you are using IP whitelisting, our sending IP-s are documented [here](#section/Using-the-API/Callback-URLs).\n  * Ensure that you have excluded the callback endpoint from your applications regular authentication system.\n* Your endpoint for receiving callbacks must be __idempotent__.\n* Your endpoint needs to allow us to `POST` the callback.\n* We expect you to return `HTTP 200 OK` response to consider the callback __delivered__.\n* Make sure you use an SSL certificates from a __trusted CA__.\n* We will attempt to deliver callbacks for __15 minutes__.\n* If the callback delivery fails, you can always trigger a resend of the callback. This can be done by:\n  * Calling the respective `Resend callback` endpoint \n  * Manually from our [portal](https://pawapay.document360.io/docs/callback-resend).\n\n## Safe handling\n\nAs pawaPays Merchant API is a financial API, status and error handling should be implemented __defensively__.\n\nAll our financial transaction endpoints __require you to specify a unique ID for the transaction__. This allows you to always verify whether the payment was received by pawaPay and verify it's status.\n\nAll statuses of payment initiations, status checks (Get Status and Details) and callbacks should be explicitly handled.\n\nFollowing handling should NOT be used:\n```\n  if( status == \"COMPLETED\" ) {\n    creditCustomer();\n  } else {\n    failPayment();\n  }\n```\n\nInstead, all statuses should be explcitly listed and __unknown situations should be escalated__.\n```\n  if( status == \"COMPLETED\" ) {\n    creditCustomer();\n  } else if ( status == \"FAILED\" ) {\n    failPayment();\n  } else {\n    //escalate and leave transaction as pending.\n    informOperations();\n  }\n```\nSpecial attention needs to be given to network related errors as well.\n\nThe following handling should NOT be used:\n```\n  try  {\n    pawaPay.deposit();\n  } catch (InterruptedException e) {\n    failPayment();\n  }\n```\n\nInstead, you have two options to ensure no discrepancies are created.\n\nFirst, you can leave the transaction pending in your system and inform your operations. \nAll payments accepted for processing are visible in our portal. \nWhether the payment was accepted by pawaPay and what is it's status can be verified from there.\n\nSecond, you can use the corresponding `Get status and details` endpoint to validate if the request was received by pawaPay.\nSince you always know the unique ID of the transaction, you can always verify the status of the payment on the pawaPay platform, even if no response was received when initiating the payment.\n\n## Automatic reconciliation\n\nImplementing the considerations listed above avoids almost all discrepancies of payment statuses between your system and pawaPay.\n\nWhen using callbacks to receive the final statuses of payments, things like network connectivity issues, system downtime and configuration errors might cause the callback to not be recieved by your system.\nTo avoid keeping your customers waiting, we strongly recommend implementing a status recheck cycle.\nFor example, a periodic job that collects all payments that have been pending for a while. It can then query the respective `Get status and details` endpoint to verify the status of the payment. \nIf the status recheck cycle finds a payment in a final state, you can use the respective `Resend callback` endpoint to trigger a callback to be resent. This avoids duplicating processing logic.\n\n## Backwards compatibility\n\nThe pawaPay Merchant API is always backwards compatible, but should not be strictly verified against the schema as backwards compatible changes might be introduced.\n\n## Brand guidelines\n\nWhen integrating with mobile network operators, refer to the provided brand guidelines in this section. \nThese documents outline the proper use of logos, color schemes, and typography, ensuring consistent and compliant representation of each operator's brand identity.\n\n* __MTN__ - https://momodeveloper.mtn.com/api-documentation/brand-guidelines\n* __Airtel__ - https://developers.airtel.africa/brand-guidelines\n* __Orange__ - https://boosted.orange.com/docs/4.4/about/brand/\n* __MPESA__ - https://www.safaricom.co.ke/about/brand-toolkit\n\n# Using the API\n\n## Where is the API?\n\n  When [creating an account](https://www.pawapay.io/activate-account) with pawaPay, you will first receive access to our sandbox environemnt. \n  The sandbox environment is completely isloated from our production environment. \n  You can safely test your integration with pawaPay without real mobile money wallets and real money involved.\n  You will get access to your production account when you have completed the onboarding on your sandbox account.\n\n  The base URL for the pawaPay Merchant API is different between our sandbox and production environments. The specific operation can be called by appending the endpoint to the base URL. \n\n  _Example: [https://api.sandbox.pawapay.cloud/payouts](https://api.sandbox.pawapay.cloud/payouts)_\n\n  Environment | Base URL\n  --------------|---------\n  Sandbox       | [https://api.sandbox.pawapay.cloud/](https://api.sandbox.pawapay.cloud/)\n  Production    | [https://api.pawapay.cloud/](https://api.pawapay.cloud/)\n\n  __The base URL and the authentication token are the only things that change between using pawaPay Merchant API in our sandbox and in production. These should be a part of your applications environment specific configuration.__\n\n\n## Authentication\n\n  The pawaPay Merchant API uses bearer token for authentication. An authorization header is required for all calls to the pawaPay Merchant APIs except for [MNO Availability](#operation/availability). \n\n  The token can be generated from our portal. Instructions on how to do that can be found in our **[portal documentation](https://pawapay.document360.io/docs/api-token)**.\n  \n  __The token generated from your sandbox account can only be used for authenticating against the Merchant API in sandbox. \n  For authenticating against the Merchant API in production, a separate token must be generated with your live account.__\n\n  As our sandbox environment is completely isolated from our production environment, the URLs for the portal are also different.\n\n  Environment | Portal URL\n  ------------|------------\n  Sandbox     | [https://dashboard.sandbox.pawapay.cloud/](https://dashboard.sandbox.pawapay.cloud/)\n  Production  | [https://dashboard.pawapay.cloud/](https://dashboard.pawapay.cloud/)\n\n  The base URL and the authentication token are the only things that change between using the Merchant API in our sandbox and in production. \n  These should be a part of your applications environment specific configuration.\n\n  Below is an example payout request with curl:\n  ```\n  curl -i -X POST |\n  https://api.sandbox.pawapay.cloud/payouts \\\n  -H 'Authorization: Bearer <YOUR_API_TOKEN>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"payoutId\": \"<UUID>\",\n  \"amount\": \"15\",\n  \"currency\": \"ZMW\",\n  \"country\": \"ZMB\",\n  \"correspondent\": \"MTN_MOMO_ZMB\",\n  \"recipient\": {\n    \"type\": \"MSISDN\",\n    \"address\": {\n      \"value\": \"260763456789\"\n    }\n  },\n    \"customerTimestamp\": \"2020-02-21T17:32:28Z\",\n    \"statementDescription\": \"Note of 4 to 22 chars\"\n  }'\n  ```\n\n## Signatures\n\nThe pawaPay API is secured by the API token as explained in [Authentication](#section/Using-the-API/Authentication).\n\nTo add a second layer of security, you can optionally sign your financial requests to us - deposit, payout and refund requests. \nIn this case, pawaPay will only accept financial requests that have been signed by you. \nTo utilize this additional capability, you should provide your public key in our portal and enable this feature. \nRead how to do that from our [portal documentation](https://pawapay.document360.io/docs/api-token).\nThis ensures that even if your API token leaks, only you can initiate financial requests with pawaPay.\n\nIf configured, pawaPay will also send callbacks to your [callback URLs](#section/Using-the-API/Callback-URLs) with the final status of your payment.  \nYour network team can whitelist the pawaPay platform IP addresses for these callback URLs.\n\nAdditionally, you can also enable pawaPay to sign those callbacks. \nYou can then validate the signature that is included in the header of the callback to ensure that callbacks are in fact coming from pawaPay and have not been tampered with.\n\n### Signatures in financial requests\n\nFinancial requests are requests sent to the pawaPay Merchant API to move funds. These include [deposits](#operation/createDeposit), [payouts](#operation/createPayout), [bulk payouts](#operation/createPayouts) and [refunds](#operation/createRefund).\n\nThe implementation of signatures in pawaPay is based on the standard described in [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/).\n\nWhen creating the financial request to send to the pawaPay Merchant API, you should create a Content-Digest, sign the request and add Signature and Signature-Input headers.\n\n#### Hash the request body\n\nFor generating the `Content-Digest` you can use either SHA-256 or SHA-512 algorithm. \nThe `Content-Digest` should be created from the request body. \nHaving the request body hashed and available as a header allows verification that the content of the request has not been tampered with. \n\n```\nContent-Digest: sha-512=:mXRb9GJnfR/lyXOVfa27Wg+QrRgX3DVhXpQwjxbWoG3BgX7ZHmXLpvQb4il2kxgLjWmj6oSdwDdn5rUAJVYnUw==:\n\n{ \n  \"depositId\": \"d6df5c10-bd43-408c-b622-f10f9eaa568b\",\n  \"amount\": \"15\",\n  \"currency\": \"ZMW\",\n  \"correspondent\": \"MTN_MOMO_ZMB\",\n  \"payer\": {\n    \"type\": \"MSISDN\",\n    \"address\": {\n        \"value\": \"260763456789\"\n    }\n  },\n  \"customerTimestamp\": \"2024-05-02T15:36:45.045064Z\",\n  \"statementDescription\": \"Signed deposit\"\n}\n```\n\nYou can read more about it [here](https://datatracker.ietf.org/doc/html/rfc9421#name-message-content)\n\n#### Create the signature base\n\nFor creating the content that will be signed, you need to create a signature base. \nThis should include all details of the request that should be verifiable. We recommend including at least the following [Derived Components](https://datatracker.ietf.org/doc/html/rfc9421#name-derived-components).\n* @method\n* @authority\n* @path\n\nAlso the following headers should be included into the request and the signature base.\n* Signature-Date\n* Content-Digest\n* Content-Type\n\nLet’s take the following example request to initiate a deposit.\n```\nAuthorization: Bearer <YOUR_API_TOKEN>\nContent-Type: application/json; charset=UTF-8\nAccept-Encoding: gzip, x-gzip, deflate\nContent-Digest: sha-512=:mXRb9GJnfR/lyXOVfa27Wg+QrRgX3DVhXpQwjxbWoG3BgX7ZHmXLpvQb4il2kxgLjWmj6oSdwDdn5rUAJVYnUw==:\nSignature-Date: 2024-05-02T15:36:45.058799Z1714653405;expires=1714653465\nAccept-Signature: rsa-pss-sha512,ecdsa-p256-sha256,rsa-v1_5-sha256,ecdsa-p384-sha384\nAccept-Digest: sha-256,sha-512\n{\n    \"depositId\": \"d6df5c10-bd43-408c-b622-f10f9eaa568b\",\n    \"amount\": \"15\",\n    \"currency\": \"ZMW\",\n    \"correspondent\": \"MTN_MOMO_ZMB\",\n    \"payer\": {\n        \"type\": \"MSISDN\",\n        \"address\": {\n            \"value\": \"260763456789\"\n        }\n    },\n    \"customerTimestamp\": \"2024-05-02T15:36:45.045064Z\",\n    \"statementDescription\": \"Signed deposit\"\n}\n```\n\nThe signature base for the above request would be the following.\n```\n\"@method\": POST\n\"@authority\": localhost:8080\n\"@path\": /deposits\n\"signature-date\": 2024-05-02T15:36:45.058799Z\n\"content-digest\": sha-512=:mXRb9GJnfR/lyXOVfa27Wg+QrRgX3DVhXpQwjxbWoG3BgX7ZHmXLpvQb4il2kxgLjWmj6oSdwDdn5rUAJVYnUw==:\n\"content-type\": application/json; charset=UTF-8\n\"@signature-params\": (\"@method\" \"@authority\" \"@path\" \"signature-date\" \"content-digest\" \"content-type\");alg=\"ecdsa-p256-sha256\";keyid=\"CUSTOMER_TEST_KEY\";created=1714653405;expires=1714653465\n```\n\nYou can read more about creating the signature base [here](https://datatracker.ietf.org/doc/html/rfc9421#name-creating-the-signature-base).\n\n#### Create the signature\n\nYou can use your private key now to sign the signature base. You can use one of the following algorithms:\n* [RSASSA-PSS Using SHA-512](https://datatracker.ietf.org/doc/html/rfc9421#name-rsassa-pss-using-sha-512)\n* [RSASSA-PKCS1-v1_5 Using SHA-256](https://datatracker.ietf.org/doc/html/rfc9421#name-rsassa-pkcs1-v1_5-using-sha)\n* [ECDSA Using Curve P-256 DSS and SHA-256](https://datatracker.ietf.org/doc/html/rfc9421#name-ecdsa-using-curve-p-256-dss)\n* [ECDSA Using Curve P-384 DSS and SHA-384](https://datatracker.ietf.org/doc/html/rfc9421#name-ecdsa-using-curve-p-384-dss)\n\nYou can read more about creating the signature [here](https://datatracker.ietf.org/doc/html/rfc9421#name-creating-a-signature).\n\n#### Include Signature and Signature-Input headers\n\nHaving generated the signature, you should include it into the `Signature` header of the request. \nYou also need to create the `Signature-Input` header which outlines the parameters and their order that were used to generate the `Signature` as well as metadata about the signature.\nThe metadata should include.\n* The used algorithm (`alg`)\n* The date the signature was created (`created`)\n* The expiration date of the keypair (`expires`)\n* The id of the key (`keyid`)\n\nThis allows pawaPay to validate the basis for the signature against your public key. \nRead more about it [here](https://datatracker.ietf.org/doc/html/rfc9421#name-the-signature-input-http-fi).\n\nThe final request that can be sent to pawaPay would look as follows.\n```\nAuthorization: Bearer <YOUR_API_TOKEN>\nContent-Type: application/json; charset=UTF-8\nAccept-Encoding: gzip, x-gzip, deflate\nContent-Digest: sha-512=:mXRb9GJnfR/lyXOVfa27Wg+QrRgX3DVhXpQwjxbWoG3BgX7ZHmXLpvQb4il2kxgLjWmj6oSdwDdn5rUAJVYnUw==:\nSignature-Date: 2024-05-02T15:36:45.058799Z\nSignature: sig-pp=:MEQCIHoWKI71ADMmqwtwW48CHgfbDWdVItVMNlXTFJjoxmEDAiBTY30Le4wQd3RXqvmYubVwrxuP7Tz1SeZcnsNdHqjJDg==:\nSignature-Input: sig-pp=(\"@method\" \"@authority\" \"@path\" \"signature-date\" \"content-digest\" \"content-type\");alg=\"ecdsa-p256-sha256\";keyid=\"CUSTOMER_TEST_KEY\";created=1714653405;expires=1714653465\nAccept-Signature: rsa-pss-sha512,ecdsa-p256-sha256,rsa-v1_5-sha256,ecdsa-p384-sha384\nAccept-Digest: sha-256,sha-512\n{\n    \"depositId\": \"d6df5c10-bd43-408c-b622-f10f9eaa568b\",\n    \"amount\": \"15\",\n    \"currency\": \"ZMW\",\n    \"correspondent\": \"MTN_MOMO_ZMB\",\n    \"payer\": {\n        \"type\": \"MSISDN\",\n        \"address\": {\n            \"value\": \"260763456789\"\n        }\n    },\n    \"customerTimestamp\": \"2024-05-02T15:36:45.045064Z\",\n    \"statementDescription\": \"Signed deposit\"\n}\n```\n\nThe pawaPay API would respond by accepting the payment for processing with the follwoing response (headers irrelevant for signatures are omitted).\n```\nContent-Digest: sha-512=:NkvHr2fjqMoKW6nxA6V6jeQXhZyKVAcYdOv6Rmpa2cMn7yZmYDFrPzj/1LiAvOmJkCEdfsS5Bn9N/uZL8nCLZQ==:\nSignature-Date: 2024-05-02T15:36:46.084331Z\nSignature: sig-pp=:MEUCIFPakg6tQqN33NueVBPCKK4/GJ7BmHqux2yNQqWOEfmRAiEA43SOGd4JvlX2DWuh1oe0nP+/J8POSfr24SwXw2aRHRs=:\nSignature-Input: sig-pp=(\"@status\" \"signature-date\" \"content-digest\");alg=\"ecdsa-p256-sha256\";keyid=\"HTTP_EC_P256_KEY:1\";created=1714653406;expires=1714653466\n\n{\"depositId\":\"d6df5c10-bd43-408c-b622-f10f9eaa568b\",\"status\":\"ACCEPTED\",\"created\":\"2024-05-02T12:36:46Z\"}\n```\n\n__Do not forget to enable signed financial calls and upload your public key in our portal. Learn how to that from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n\n#### Make the request\n\nYou can now send this request to pawaPay Merchant API to initiate a [deposit](#operation/createDeposit), [payout](#operation/createPayout), [bulk payout](#operation/createPayouts) and [refund](#operation/createRefund).\n\n### Signatures in callbacks\n\nWhen receiving callbacks from pawaPay they will include the following headers.\n* Signature\n* Signature-Input\n* Signature-Date\n* Content-Type\n* Content-Digest\nYou can verify that the request has not been tampered with and is coming from pawaPay.\n\nHere is an example callback for a deposit.\n```\nContent-Type: application/json; charset=UTF-8\nAccept-Encoding: gzip, x-gzip, deflate\nContent-Digest: sha-512=:0ki7QBS/0MA424uwOq3k5HnJnL5SRkPjit12m0YMpd4JgWiMvm9+yNT3FunkpDaTSsKhTkliQwJlRw9bgsos9w==:\nSignature-Date: 2024-05-02T16:45:51.131905Z\nSignature: sig-pp=:MEQCIHFvGCUgyxmmowMufO4Yk20pBs3JHRax81si2QZVi9ByAiBPpg1WBhQjZ6fmi3a/gKcWiQ73Qm9Ol35On3c4K/flew==:\nSignature-Input: sig-pp=(\"@method\" \"@authority\" \"@path\" \"signature-date\" \"content-digest\" \"content-type\");alg=\"ecdsa-p256-sha256\";keyid=\"CUSTOMER_TEST_KEY\";created=1714657551;expires=1714657611\nAccept-Signature: rsa-pss-sha512,ecdsa-p256-sha256,rsa-v1_5-sha256,ecdsa-p384-sha384\nAccept-Digest: sha-256,sha-512\n{\n    \"depositId\": \"4985d482-454d-4ebc-abc9-ad525eef21b6\",\n    \"status\": \"COMPLETED\",\n    \"requestedAmount\": \"15\",\n    \"currency\": \"ZMW\",\n    \"country\": \"ZMB\",\n    \"correspondent\": \"MTN_MOMO_ZMB\",\n    \"payer\": {\n        \"type\": \"MSISDN\",\n        \"address\": {\n            \"value\": \"260763456789\"\n        }\n    },\n    \"customerTimestamp\": \"2024-05-02T16:45:51.120601Z\",\n    \"statementDescription\": \"Signed deposit\",\n    \"created\": \"2024-05-02T16:45:51.120601Z\",\n    \"depositedAmount\": \"15\",\n    \"respondedByPayer\": \"2024-05-02T16:45:51.120601Z\",\n    \"correspondentIds\": {\n        \"MTN_INIT\": \"ABC123\",\n        \"MTN_FINAL\": \"DEF456\"\n    }\n}\n```\n\n#### Validate content integrity\n\nCreate a hash of the request body using the algorithm specified in the `Content-Digest` header. \nComparing the generated value to the value in `Content-Digest` ensures the body of the request has not been tampered with.\n\n#### Validate the signature\n\nBased on the parameters in `Signature-Input`, generate the signature base for the request. You can read more about it [here](https://datatracker.ietf.org/doc/html/rfc9421#name-creating-the-signature-base).\n\nBased on the previous example, the signature base would be the following.\n```\n\"@method\": POST\n\"@authority\": localhost:8080\n\"@path\": /callback\n\"signature-date\": 2024-05-02T16:45:51.131905Z\n\"content-digest\": sha-512=:0ki7QBS/0MA424uwOq3k5HnJnL5SRkPjit12m0YMpd4JgWiMvm9+yNT3FunkpDaTSsKhTkliQwJlRw9bgsos9w==:\n\"content-type\": application/json; charset=UTF-8\n\"@signature-params\": (\"@method\" \"@authority\" \"@path\" \"signature-date\" \"content-digest\" \"content-type\");alg=\"ecdsa-p256-sha256\";keyid=\"CUSTOMER_TEST_KEY\";created=1714657551;expires=1714657611\n```\n\nYou can retrieve the public key to verify the signature from the [Public Keys](#operation/public_key_http) endpoint.\nUsing the retrieved public key, the generated signature base and the signature, you can now verify that the the content (as specified by the `Signature-Input`) was in fact signed by pawaPay and therefore originates from pawaPay.\n\n\n## Callback URLs\n\n  The pawaPay Merchant API is asyncrhonous. You can read more from [Asynchronous API](#section/Implementation/Asynchronous-API).\n  \n  Callback URLs are configured from our portal. You can find instructions on how to do that from our [portal documentation](https://pawapay.document360.io/docs/callback-urls).\n\n  When using callbacks, please ensure the following IP addresses are whitelisted to ensure we can reliably deliver callbacks to you.\n\n  Environment | IP\n  --------------|----\n  Sandbox       | 3.64.89.224/32\n  Production    | 18.192.208.15/32\n  Production    | 18.195.113.136/32\n  Production    | 3.72.212.107/32\n  Production    | 54.73.125.42/32\n  Production    | 54.155.38.214/32\n  Production    | 54.73.130.113/32\n\n## Correspondents\n\nCorrespondents in our Merchant API refer to the specific Mobile Network Operators (MNOs) that are available through our platform. \nThe parameters that define the destination of the payment are <code>correspondent</code> and <code>payer</code> for [Deposits](/#tag/deposits) or <code>recipient</code> for [Payouts](/#tag/payouts). \nThis routes the payment to the correct person (specified by the MSISDN) on the correct mobile network (specified by the <code>correspondent</code>).\n\nYou can always check which correspondents are available on your account from the [active configuration](#operation/active_conf) endpoint.\n\nYou can use the [predict-correspondent](#operation/predict-correspondent) endpoint to predict the MNO for a phone number (MSISDN).\n\nThe amount of decimal places that can be specified as the `amount` of the transaction vary between different MNOs. \nYou can find the list of all available correspondents, their currency and supported decimal places  below.\n\n### Benin\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMTN | MTN_MOMO_BEN | BEN | XOF | Not supported\nMoov | MOOV_BEN | BEN | XOF | Not supported\n\n### Burkina Faso\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMoov | MOOV_BFA | BFA | XOF | Not supported\nOrange | ORANGE_BFA | BFA | XOF | Not supported\n\n### Cameroon\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMTN | MTN_MOMO_CMR | CMR | XAF | Not supported\nOrange | ORANGE_CMR | CMR | XAF | Not supported\n\n###  Côte d'Ivoire (Ivory Coast)\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMTN | MTN_MOMO_CIV | CIV | XOF | Not supported\nOrange | ORANGE_CIV | CIV | XOF | Not supported\n\n###  Democratic Republic of the Congo\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nVodacom | VODACOM_MPESA_COD | COD | CDF | 2 places\nAirtel | AIRTEL_COD | COD | CDF | 2 places\nOrange | ORANGE_COD | COD | CDF | 2 places\n\n###  Ghana\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMTN | MTN_MOMO_GHA | GHA | GHS | 2 places\nAT | AIRTELTIGO_GHA | GHA | GHS | 2 places\nVodafone | VODAFONE_GHA | GHA | GHS | 2 places\n\n###  Kenya\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nMPesa | MPESA_KEN | KEN | KES | Deposits: not supported; payouts: 2 places\n\n###  Malawi\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_MWI | MWI | MWK | 2 places\nTNM | TNM_MWI | MWI | MWK | 2 places\n\n###  Mozambique\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nVodacom | VODACOM_MOZ | MOZ | MZN | 2 places\n\n###  Nigeria\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_NGA | NGA | NGN | Not supported\nMTN | MTN_MOMO_NGA | NGA | NGN | 2 places\n\n###  Rwanda\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_RWA | RWA | RWF | Not supported\nMTN | MTN_MOMO_RWA | RWA | RWF | Not supported\n\n###  Senegal\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nFree | FREE_SEN | SEN | XOF | Not supported\nOrange | ORANGE_SEN | SEN | XOF | Not supported\n\n###  Sierra Leone\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nOrange | ORANGE_SLE | SLE | SLE | 2 places\n\n###  Tanzania\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_TZA | TZA | TZS | 2 places\nVodacom | VODACOM_TZA | TZA | TZS | 2 places\nTigo | TIGO_TZA | TZA | TZS | Not supported\nHalotel | HALOTEL_TZA | TZA | TZS | Not supported\n\n###  Uganda\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_OAPI_UGA | UGA | UGX | Not supported\nMTN | MTN_MOMO_UGA | UGA | UGX | 2 places\n\n###  Zambia\n\nMNO | Correspondent | Country | Currency | Decimals in amount\n------------------------------|---------------|---------|----------|-------------------\nAirtel | AIRTEL_OAPI_ZMB | ZMB | ZMW | 2 places\nMTN | MTN_MOMO_ZMB | ZMB | ZMW | 2 places\nZamtel | ZAMTEL_ZMB | ZMB | ZMW | 2 places\n\n# Testing the API\n\n## Overview\n\nAs part of using the pawaPay platform, you will have access to our sandbox environment.\nYour sandbox account will have access to all the MNOs available on our platform.\nYou can safely test your integration without any real mobile money wallets and real money involved.\nIn sandbox, we have also created special phone numbers (MSISDNs) that can be used to test different scenarios. \n\n## Test phone numbers (MSISDNs)\n### Benin - MTN (MTN_MOMO_BEN)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n22951345029 | PAYER_NOT_FOUND\n22951345039 | PAYMENT_NOT_APPROVED\n22951345069 | OTHER_ERROR\n22951345129 | NO CALLBACK (stuck in SUBMITTED state)\n22951345789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n22951345089 | RECIPIENT_NOT_FOUND\n22951345119 | OTHER_ERROR\n22951345129 | NO CALLBACK (stuck in SUBMITTED state)\n22951345789 | N/A (COMPLETED)\n\n### Benin - Moov (MOOV_BEN)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n22995345679 | PAYMENT_NOT_APPROVED\n22995345529 | OTHER_ERROR\n22995345639 | NO CALLBACK (stuck in SUBMITTED state)\n22995345789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n22995345219 | OTHER_ERROR\n22995345279 | NO CALLBACK (stuck in SUBMITTED state)\n22995345789 | N/A (COMPLETED)\n\n### Burkina Faso - Moov (MOOV_BFA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n22602345048 | INSUFFICIENT_BALANCE\n22602345068 | OTHER_ERROR\n22602345138 | NO CALLBACK (stuck in SUBMITTED state)\n22602345678 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n22602345118 | OTHER_ERROR\n22602345138 | NO CALLBACK (stuck in SUBMITTED state)\n22602345678 | N/A (COMPLETED)\n\n### Burkina Faso - Orange (ORANGE_BFA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n22607345148 | PAYMENT_NOT_APPROVED\n22607345128 | NO CALLBACK (stuck in SUBMITTED state)\n22607345678 | N/A (COMPLETED)\n\n### Cameroon - MTN (MTN_MOMO_CMR)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n237653456019 | PAYER_LIMIT_REACHED\n237653456029 | PAYER_NOT_FOUND\n237653456039 | PAYMENT_NOT_APPROVED\n237653456069 | OTHER_ERROR\n237653456129 | NO CALLBACK (stuck in SUBMITTED state)\n237653456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n237653456089 | RECIPIENT_NOT_FOUND\n237653456119 | OTHER_ERROR\n237653456129 | NO CALLBACK (stuck in SUBMITTED state)\n237653456789 | N/A (COMPLETED)\n\n### Cameroon - Orange (ORANGE_CMR)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n237693456019 | PAYER_LIMIT_REACHED\n237693456029 | PAYER_NOT_FOUND\n237693456039 | PAYMENT_NOT_APPROVED\n237693456049 | INSUFFICIENT_BALANCE\n237693456069 | OTHER_ERROR\n237693456129 | NO CALLBACK (stuck in SUBMITTED state)\n237693456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n237693456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n237693456119 | OTHER_ERROR\n237693456129 | NO CALLBACK (stuck in SUBMITTED state)\n237693456789 | N/A (COMPLETED)\n\n### Côte d'Ivoire - MTN (MTN_MOMO_CIV)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n2250503456029 | PAYER_NOT_FOUND\n2250503456039 | PAYMENT_NOT_APPROVED\n2250503456069 | OTHER_ERROR\n2250503456129 | NO CALLBACK (stuck in SUBMITTED state)\n2250503456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n2250503456089 | RECIPIENT_NOT_FOUND\n2250503456119 | OTHER_ERROR\n2250503456129 | NO CALLBACK (stuck in SUBMITTED state)\n2250503456789 | N/A (COMPLETED)\n\n### Democratic Republic of the Congo - Vodacom (VODACOM_MPESA_COD)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n243813456019 | PAYER_LIMIT_REACHED\n243813456029 | PAYER_NOT_FOUND\n243813456039 | PAYMENT_NOT_APPROVED\n243813456049 | INSUFFICIENT_BALANCE\n243813456069 | OTHER_ERROR\n243813456129 | NO CALLBACK (stuck in SUBMITTED state)\n243813456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n243813456089 | RECIPIENT_NOT_FOUND\n243813456119 | OTHER_ERROR\n243813456129 | NO CALLBACK (stuck in SUBMITTED state)\n243813456789 | N/A (COMPLETED)\n\n### Democratic Republic of the Congo - Airtel (AIRTEL_COD)\n#### Deposits\nMSISDN | failureCode\n-------|-------------\n243973456069 | OTHER_ERROR\n243973456129 | NO CALLBACK (stuck in SUBMITTED state)\n243973456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n243973456089 | RECIPIENT_NOT_FOUND\n243973456119 | OTHER_ERROR\n243973456129 | NO CALLBACK (stuck in SUBMITTED state)\n243973456789 | N/A (COMPLETED)\n\n### Democratic Republic of the Congo - Orange (ORANGE_COD)\n#### Deposits\nMSISDN | failureCode\n-------|-------------\n243893456029 | PAYER_NOT_FOUND\n243893456039 | PAYMENT_NOT_APPROVED\n243893456049 | INSUFFICIENT_BALANCE\n243893456069 | OTHER_ERROR\n243893456129 | NO CALLBACK (stuck in SUBMITTED state)\n243893456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n243893456119 | OTHER_ERROR\n243893456129 | NO CALLBACK (stuck in SUBMITTED state)\n243893456789 | N/A (COMPLETED)\n\n### Ghana - MTN (MTN_MOMO_GHA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n233593456019 | PAYER_LIMIT_REACHED\n233593456029 | PAYER_NOT_FOUND\n233593456039 | PAYMENT_NOT_APPROVED\n233593456069 | OTHER_ERROR\n233593456129 | NO CALLBACK (stuck in SUBMITTED state)\n233593456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n233593456089 | RECIPIENT_NOT_FOUND\n233593456119 | OTHER_ERROR\n233593456129 | NO CALLBACK (stuck in SUBMITTED state)\n233593456789 | N/A (COMPLETED)\n\n### Ghana - AT (AIRTELTIGO_GHA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n233273456069 | OTHER_ERROR\n233273456129 | NO CALLBACK (stuck in SUBMITTED state)\n233273456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n233273456089 | RECIPIENT_NOT_FOUND\n233273456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n233273456119 | OTHER_ERROR\n233273456129 | NO CALLBACK (stuck in SUBMITTED state)\n233273456789 | N/A (COMPLETED)\n\n### Ghana - Vodafone (VODAFONE_GHA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n233503456039 | PAYMENT_NOT_APPROVED\n233503456049 | INSUFFICIENT_BALANCE\n233503456069 | OTHER_ERROR\n233503456129 | NO CALLBACK (stuck in SUBMITTED state)\n233503456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n233503456089 | RECIPIENT_NOT_FOUND\n233503456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n233503456119 | OTHER_ERROR\n233503456129 | NO CALLBACK (stuck in SUBMITTED state)\n233503456789 | N/A (COMPLETED)\n\n### Kenya - MPesa (MPESA_KEN)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n254703456019 | PAYER_LIMIT_REACHED\n254703456039 | PAYMENT_NOT_APPROVED\n254703456049 | INSUFFICIENT_BALANCE\n254703456059 | TRANSACTION_ALREADY_IN_PROCESS\n254703456069 | OTHER_ERROR\n254703456129 | NO CALLBACK (stuck in SUBMITTED state)\n254703456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n254703456089 | RECIPIENT_NOT_FOUND\n254703456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n254703456109 | RECIPIENT_LIMIT_REACHED\n254703456119 | OTHER_ERROR\n254703456129 | NO CALLBACK (stuck in SUBMITTED state)\n254703456789 | N/A (COMPLETED)\n\n### Malawi - Airtel (AIRTEL_MWI)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n265993456049 | INSUFFICIENT_BALANCE\n265993456069 | OTHER_ERROR\n265993456129 | NO CALLBACK (stuck in SUBMITTED state)\n265993456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n265993456089 | RECIPIENT_NOT_FOUND\n265993456119 | OTHER_ERROR\n265993456129 | NO CALLBACK (stuck in SUBMITTED state)\n265993456789 | N/A (COMPLETED)\n\n### Malawi - TNM (TNM_MWI)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n265883456049 | INSUFFICIENT_BALANCE\n265883456069 | OTHER_ERROR\n265883456129 | NO CALLBACK (stuck in SUBMITTED state)\n265883456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n265883456089 | RECIPIENT_NOT_FOUND\n265883456119 | OTHER_ERROR\n265883456129 | NO CALLBACK (stuck in SUBMITTED state)\n265883456789 | N/A (COMPLETED)\n\n### Nigeria - Airtel (AIRTEL_NGA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n2349034567069 | OTHER_ERROR\n2349034567129 | NO CALLBACK (stuck in SUBMITTED state)\n2349034567899 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n2349034567089 | RECIPIENT_NOT_FOUND\n2349034567119 | OTHER_ERROR\n2349034567129 | NO CALLBACK (stuck in SUBMITTED state)\n2349034567899 | N/A (COMPLETED)\n\n### Nigeria - MTN (MTN_MOMO_NGA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n2348134567019 | PAYER_LIMIT_REACHED\n2348134567029 | PAYER_NOT_FOUND\n2348134567039 | PAYMENT_NOT_APPROVED\n2348134567069 | OTHER_ERROR\n2348134567129 | NO CALLBACK (stuck in SUBMITTED state)\n2348134567899 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n2348134567089 | RECIPIENT_NOT_FOUND\n2348134567099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n2348134567119 | OTHER_ERROR\n2348134567129 | NO CALLBACK (stuck in SUBMITTED state)\n2348134567899 | N/A (COMPLETED)\n\n### Rwanda - Airtel (AIRTEL_RWA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n250733456039 | PAYMENT_NOT_APPROVED\n250733456049 | INSUFFICIENT_BALANCE\n250733456069 | OTHER_ERROR \n250733456129 | NO CALLBACK (stuck in SUBMITTED state)\n250733456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n250733456089 | RECIPIENT_NOT_FOUND\n250733456119 | OTHER_ERROR\n250733456129 | NO CALLBACK (stuck in SUBMITTED state)\n250733456789 | N/A (COMPLETED)\n\n### Rwanda - MTN (MTN_MOMO_RWA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n250783456019 | PAYER_LIMIT_REACHED\n250783456029 | PAYER_NOT_FOUND\n250783456039 | PAYMENT_NOT_APPROVED\n250783456069 | OTHER_ERROR\n250783456129 | NO CALLBACK (stuck in SUBMITTED state)\n250783456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n250783456089 | RECIPIENT_NOT_FOUND\n250783456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n250783456119 | OTHER_ERROR\n250783456129 | NO CALLBACK (stuck in SUBMITTED state)\n250783456789 | N/A (COMPLETED)\n\n### Senegal - Free (FREE_SEN)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n221763456049 | INSUFFICIENT_BALANCE\n221763456069 | OTHER_ERROR\n221763456129 | NO CALLBACK (stuck in SUBMITTED state)\n221763456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n221763456119 | OTHER_ERROR\n221763456129 | NO CALLBACK (stuck in SUBMITTED state)\n221763456789 | N/A (COMPLETED)\n\n### Senegal - Orange (ORANGE_SEN)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n221773456029 | PAYER_NOT_FOUND\n221773456049 | INSUFFICIENT_BALANCE\n221773456069 | OTHER_ERROR\n221773456129 | NO CALLBACK (stuck in SUBMITTED state)\n221773456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n221773456119 | OTHER_ERROR\n221773456139 | NO CALLBACK (stuck in SUBMITTED state)\n221773456789 | N/A (COMPLETED)\n\n### Sierra Leone - Orange (ORANGE_SLE)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n23276123456 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n23276123456 | N/A (COMPLETED)\n\n### Tanzania - Airtel (AIRTEL_TZA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n255683456019 | PAYER_LIMIT_REACHED\n255683456039 | PAYMENT_NOT_APPROVED\n255683456049 | INSUFFICIENT_BALANCE\n255683456069 | OTHER_ERROR\n255683456129 | NO CALLBACK (stuck in SUBMITTED state)\n255683456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n255683456089 | RECIPIENT_NOT_FOUND\n255683456119 | OTHER_ERROR\n255683456129 | NO CALLBACK (stuck in SUBMITTED state)\n255683456789 | N/A (COMPLETED)\n\n### Tanzania - Vodacom (VODACOM_TZA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n255763456039 | PAYMENT_NOT_APPROVED\n255763456069 | OTHER_ERROR\n255763456129 | NO CALLBACK (stuck in SUBMITTED state)\n255763456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n255763456119 | OTHER_ERROR\n255763456129 | NO CALLBACK (stuck in SUBMITTED state)\n255763456789 | N/A (COMPLETED)\n\n### Tanzania - Tigo (TIGO_TZA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n255713456039 | PAYMENT_NOT_APPROVED\n255713456049 | INSUFFICIENT_BALANCE\n255713456069 | OTHER_ERROR\n255713456129 | NO CALLBACK (stuck in SUBMITTED state)\n255713456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n255713456089 | RECIPIENT_NOT_FOUND\n255713456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n255713456119 | OTHER_ERROR\n255713456129 | NO CALLBACK (stuck in SUBMITTED state)\n255713456789 | N/A (COMPLETED)\n\n### Tanzania - Halotel (HALOTEL_TZA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n255623456029 | PAYER_NOT_FOUND\n255623456049 | INSUFFICIENT_BALANCE\n255623456069 | OTHER_ERROR\n255623456129 | NO CALLBACK (stuck in SUBMITTED state)\n255623456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n255623456089 | RECIPIENT_NOT_FOUND\n255623456119 | OTHER_ERROR\n255623456129 | NO CALLBACK (stuck in SUBMITTED state)\n255623456789 | N/A (COMPLETED)\n\n### Uganda - Airtel (AIRTEL_OAPI_UGA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n256753456019 | PAYER_LIMIT_REACHED\n256753456039 | PAYMENT_NOT_APPROVED\n256753456049 | INSUFFICIENT_BALANCE\n256753456069 | OTHER_ERROR\n256753456129 | NO CALLBACK (stuck in SUBMITTED state)\n256753456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n256753456089 | RECIPIENT_NOT_FOUND\n256753456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n256753456119 | OTHER_ERROR\n256753456129 | NO CALLBACK (stuck in SUBMITTED state)\n256753456789 | N/A (COMPLETED)\n\n### Uganda - MTN (MTN_MOMO_UGA)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n256783456019 | PAYER_LIMIT_REACHED\n256783456029 | PAYER_NOT_FOUND\n256783456069 | OTHER_ERROR\n256783456129 | NO CALLBACK (stuck in SUBMITTED state)\n256783456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n256783456089 | RECIPIENT_NOT_FOUND\n256783456099 | RECIPIENT_NOT_ALLOWED_TO_RECEIVE\n256783456119 | OTHER_ERROR\n256783456789 | N/A (COMPLETED)\n\n### Zambia - Airtel (AIRTEL_OAPI_ZMB)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n260973456019 | PAYER_LIMIT_REACHED\n260973456039 | PAYMENT_NOT_APPROVED\n260973456049 | INSUFFICIENT_BALANCE\n260973456069 | OTHER_ERROR\n260973456129 | NO CALLBACK (stuck in SUBMITTED state)\n260973456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n260973456089 | RECIPIENT_NOT_FOUND\n260973456119 | OTHER_ERROR\n260973456129 | NO CALLBACK (stuck in SUBMITTED state)\n260973456789 | N/A (COMPLETED)\n\n### Zambia - MTN (MTN_MOMO_ZMB)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n260763456019 | PAYER_LIMIT_REACHED\n260763456029 | PAYER_NOT_FOUND\n260763456039 | PAYMENT_NOT_APPROVED\n260763456069 | OTHER_ERROR\n260763456129 | NO CALLBACK (stuck in SUBMITTED state)\n260763456789 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n260763456079 | RECIPIENT_NOT_FOUND\n260763456119 | OTHER_ERROR\n260763456129 | NO CALLBACK (stuck in SUBMITTED state)\n260763456789 | N/A (COMPLETED)\n\n### Zambia - Zamtel (ZAMTEL_ZMB)\n#### Deposits\n\nMSISDN | failureCode\n-------|-------------\n260953456704 | INSUFFICIENT_BALANCE\n260953456712 | OTHER_ERROR\n260953456789 | NO CALLBACK (stuck in SUBMITTED state)\n260953456700 | N/A (COMPLETED)\n\n#### Payouts\nMSISDN | failureCode\n-------|-------------\n260953456712 | OTHER_ERROR\n260953456789 | NO CALLBACK (stuck in SUBMITTED state)\n260953456700 | N/A (COMPLETED)\n\n## Technical failure codes\n\nTechnical failures should not happen during live operation and are intended to provide clear information during the development of the integration.\n\nFailure Code | Operation | Description\n-------------|-----------|------------\nINVALID_RECIPIENT_FORMAT | Payouts | The financial address for the recipient is in an unrecognizable format. Please refer to <code>recipient</code> in [Mobile Money Payout Request](/#operation/createPayout)\nINVALID_PAYER_FORMAT | Deposits | The financial address for the payer is in an unrecognizable format. Please refer to <code>payer</code> in [Mobile Money Deposit Request](#operation/createDeposit).\nINVALID_CURRENCY | Both | The currency is not supported by the MNO specified as the correspondent.\nINVALID_AMOUNT | Both | The amount is in an unrecognizable format. Please refer to <code>amount</code> in [Mobile Money Deposit Request](#operation/createDeposit).\nINVALID_COUNTRY | Both | The country is not supported by the MNO specified as the correspondent.\nAMOUNT_TOO_SMALL | Both | The specified amount is smaller than the minimum allowed by the MNO specified as the correspondent.\nAMOUNT_TOO_LARGE | Both | The specified amount is larger than the maximum allowed by the MNO specified as the correspondent.\nPARAMETER_INVALID | Both | An invalid parameter was found as part of the request.\nDEPOSITS_NOT_ALLOWED | Deposits | The MNO specified as the correspondent does not support deposit transactions.\nPAYOUTS_NOT_ALLOWED | Payouts | The MNO specified as the correspondent does not support payout transactions.\nAUTHENTICATION_ERROR| Both | The token specified for authentication is not valid or missing. Please refer to [Authentication](#section/Using-the-API/Authentication).\nINVALID_INPUT | Both | We were was unable to parse the payload of the request.\n\n## Transaction failure codes\n\nTransaction failures are expected to happen during live operation and are intended to provide clear information as to why a particular payment was not successful.\n\nFailure Code | Operation | Description\n-------------|-----------|------------\nPAYER_LIMIT_REACHED | Deposits | The customer has reached a limit on their wallet. Example: Customer is only allowed to transfer a maximum of 1 000 000 a week.\nPAYER_NOT_FOUND | Deposits | The phone number (MSISDN) specified as the payer does not belong to the MNO specified as the correspondent.\nPAYMENT_NOT_APPROVED | Deposits | The customer did not authorize the payment. _Example: Customer did not enter their PIN in time._\nINSUFFICIENT_BALANCE | Deposits | The customer does not have enough funds to perform the deposit.\nTRANSACTION_ALREADY_IN_PROCESS | Deposits | The customer is initiating a transaction while an unfinished transaction is still pending. _Note: Some MNOs only allow a single transaction to be processed at any given time. When the customer does not enter the PIN to authorize a payment in time, it might take up to 10 minutes for them to be able to initiate a new transaction._\nBALANCE_INSUFFICIENT | Payouts | The balance of your pawaPay wallet does not have the funds to initiate this payout.\nRECIPIENT_NOT_FOUND | Payouts | The phone number (MSISDN) specified as the recipient, does not belong to the mobile network operator (MNO) specified as the correspondent.\nRECIPIENT_NOT_ALLOWED_TO_RECEIVE | Payouts | The recipient has reached a limit on their wallet that stops them from being able to accept this payout. _Example: The customers wallet is able to hold up to 1 000 000 and the payout would take their balance over this limit._\nMANUALLY_CANCELLED | Payouts | The payout request was enqueued and subsequently failed manually from your pawaPay portal or through the [Cancel Enqueued Payout](#operation/payoutsFailEnqueued) endpoint.\nOTHER_ERROR | Both | The payment failed due to an unknown error.\nCORRESPONDENT_TEMPORARILY_UNAVAILABLE | Both | The MNO specified as the correspondent is currently experiencing an outage and processing of payments has been temporarily halted. Please refer to our [Status Page](https://status.pawapay.cloud) for live information about MNO availability. \n\n# Moving to production\n\n## Overview\n\nWhen you are ready to move from the sandbox environment to production, make sure you are using the correct [base URL](#section/Using-the-API/Where-is-the-API) and the correct [authentication token](#section/Using-the-API/Authentication). \nThese are the only parameters that should be different between sandbox and production.\n\n**We recommend keeping those parameters in your environemnt specific configuration.**\n\nIf you use IP whitelisting, make sure [our IP-s are whitelisted](/#section/Using-the-API/Callback-URLs) to ensure we can deliver you callbacks.\n\n## Go-live testing\n\nWe recommend implementing a feature flag for your integration with pawaPay to enable go-live testing in production, before market launch. \nThis allows you to test the end-to-end flow in production to uncover any environemnt specific problems without affecting customers.\n\nTo test live payments you will need for each MNO that you use:\n\n* A phone and phone number with the specific MNO.\n* An active mobile money wallet on that phone number.\n* An available balance on the mobile money wallet to conduct the tests with.\n* Be ready to enter the PIN code on the phone around 20-60 seconds from initiating the payment through our API.\n\n# Payout (Disbursement)\n\nYou can disburse money from your pawaPay account to a customers mobile money wallet.\n\nThis operation does not involve the recipient having to authorise the transaction by entering their PIN code. The operation is usually processed within seconds.\n\nAfter we receive a payout request, we send it to the MNO specified as the [correspondent](#section/Using-the-API/Correspondents). \nWhen the MNO finalizes your payout request, it will inform pawaPay and consequently pawaPay notifies you of the result by calling your defined [callback URL](#section/Using-the-API/Callback-URLs) with a **[Payout Status Callback](/#operation/payoutWebhook)** (if configured). \nIf you have not configured callbacks, you can always check the status of your payout request through our **[Get Payout Status and Details](/#operation/getPayout)** endpoint. \n\n***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nAfter your payout request has been **accepted** for processing, it can have one of the following statuses in the pawaPay platform:\n\nStatus | Description\n-------|------------\n`ACCEPTED` | The payout request has been **accepted** by pawaPay for processing.\n`ENQUEUED` | The payout request has been **accepted**, but has been enqueued for processing later.\n`SUBMITTED` | The payout request has been submitted to the MNO and is being processed.\n`COMPLETED` | The payout request has been successful. This is a **final state**.\n`FAILED` | The payout request has failed. This is a **final state**. \n\n## Enqueued payouts\n\nSometimes MNOs have either degraded performance or their systems are unavailable completely.\nRead more about [MNO stability](#section/Implementation/MNO-stability).\n\nOur Payment Operations team monitors the MNOs availability 24/7 and publishes that information on our [status page](https://status.pawapay.cloud/). \nThis information is also accessible programmatically from our [availability](#operation/availability) endpoint.\nWhen an MNO is not able to process payouts, our platform will still accepts payout requests for processing. \nYour payout request will return 'ENQUEUED' as the status.\nThe payout will be enqueued until the MNOs systems become operational.\n\nYou can always cancel the enqueued payout before it's processed using the [Cancel enqueued payout](#operation/payoutsFailEnqueued) endpoint. \nIt's also possible to cancel it from our portal as described in our [portal documentation](https://pawapay.document360.io/docs/cancel-enqueued-payout).\n\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/658c43e186bdc5c173a51efe_API%20docs%20visuals%20-%20Payout%20with%20pawaPay%20Merchant%20API.jpg\" alt=\"Payout with pawaPay Merchant API\" />\n\n# Deposit (Collection)\n\nYou can request payment from a customer. Funds will be moved from the customers mobile money wallet to your account in pawaPay.\n\nThis operation needs to be explicitly authorised by the customer by entering their PIN code. \nThe operation can take between a few seconds up to a few minutes to be processed successfully.\n\nAfter the deposit request is sent to pawaPay, we forward the request to the Mobile Network Operator (MNO) specified as the [correspondent](#section/Using-the-API/Correspondents).\nThe MNO sends the request to the customer for authorization. \nThe customer then authorizes the payment by entering their PIN code on their mobile phone. \nUpon customers authorization (or rejection), the MNO informs pawaPay of the result and consequently pawaPay notifies you of the result by calling your defined [callback URL](#section/Using-the-API/Callback-URLs) with a **[Deposit Status Callback](/#operation/depositWebhook)** (if configured). \nIf you have not configured callbacks, you can always check the status of your deposit request through our **[Deposit Get Status and Details](/#operation/getDeposit)** endpoint.\n\n***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nAfter your deposit request has been **accepted** for processing, it can have one of the following statuses in the pawaPay platform:\n\nStatus | Description\n-------|------------\n`ACCEPTED` | The deposit request has been **accepted** by pawaPay for processing.\n`SUBMITTED` | The deposit request has been submitted to the MNO and is being processed.\n`COMPLETED` | The deposit request has been successful. This is a **final state**.\n`FAILED` | The deposit request has failed. This is a **final state**.\n\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/658c43eb33a9c46d1453dbd6_API%20docs%20visuals%20-%20Deposit%20with%20pawaPay%20Merchant%20API.jpg\" alt=\"Deposit with pawaPay Merchant API\" />\n\n# Refund\n\nYou can refund an already completed collection (deposit) from your pawaPay account back to the customers mobile money wallet. \n\nThis operation does not involve the recipient having to authorise the transaction. The operation is usually processed within seconds.\n\nAfter we have received a refund request, we send it to the MNO specified as the [correspondent](#section/Using-the-API/Correspondents). \nWhen the MNO finalizes your refund request, it will inform pawaPay and consequently pawaPay notifies you of the result by calling your defined [callback URL](#section/Using-the-API/Callback-URLs) with a **[Refund Status Callback](/#operation/refundWebhook)** (if configured). \nIf you have not configured callbacks, you can always check the status of your refund request through our **[Get Refund Status and Details](/#operation/getRefund)** endpoint. \n\n***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nAfter your refund request has been **accepted** for processing, it can have one of the following statuses in the pawaPay platform:\n\nStatus | Description\n-------|------------\n`ACCEPTED` | The refund request has been **accepted** by pawaPay for processing.\n`SUBMITTED` | The refund request has been submitted to the MNO and is being processed.\n`COMPLETED` | The refund request has been successful. This is a **final state**.\n`FAILED` | The refund request has failed. This is a **final state**. \n\n# Payment Page\n\n## Overview\n\nThe pawaPay Payment Page allows you to rapidly integrate mobile money into your website or mobile app providing:\n* User experience for your customers that is optimised for mobile money.\n* Responsive design that works on desktop and mobile.\n* Low code integration supporting all countries and MNOs.\n* Support for both e-commerce and e-wallet use cases.\n\n\n### Enter details\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/6531543963b3356da7d34ee6_Screenshot%202023-10-19%20at%2019.07.02.png\" alt=\"Payment page - Start\" />\n\n### Authorise the payment\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/653153f2fc56773ae63c86a6_Screenshot%202023-10-19%20at%2018.46.22.png\" alt=\"Payment page - Enter PIN\" />\n\n### All done\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/6531534a44a80d5d49e83c3c_Screenshot%202023-10-19%20at%2018.46.34.png\" alt=\"Payment page - Success\" />\n\n\nIt is also integrated to the rest of the pawaPay merchant API, providing benefits like:\n* Phone numbers are valildated to be in the correct format.\n* The MNO to use for the payment is predicted based on the entered phone number.\n* Minimum and maxium transaction limits are always up to date.\n* When new countries or MNOs are enabled, they are available for your customers immediately.\n* Information about MNOs having downtime is integrated into the user experience.\n* With many more improvements to come...\n\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/65315333073091cee0417f51_Screenshot%202023-10-19%20at%2018.48.57.png\" alt=\"Payment page - Features\" />\n\n## Implementation\n\nUsing the payment flow in your deposit or checkout experience is simple:\n\n1. When it's time for the customer to pay, [start a new session](#operation/create-session). **The session will time out after 15 minutes.**\n2. Forward the customer to the `redirectUrl` that you received in the response.\n3. The customer will complete the payment on the Payment Page and forwarded to `returnUrl`.\n4. Your page on `returnUrl` should [verify the status](#operation/getDeposit) of the payment. The `depositId` will be passed as a URL parameter.\n5. Based on the `status` of the payment handle a successful, failed or long running payment.\n\n<img class=\"screenshot\" src=\"https://uploads-ssl.webflow.com/62824591015aa314fd308df1/653264612cb29c000a8b7dae_Payment-page-implementation.png\" alt=\"Payment page - Implementation flow\" />\n",
    "version": "v1",
    "x-logo": {
      "url": "https://global-uploads.webflow.com/62824591015aa314fd308df1/6411b26596e3de3f52551c00_Logopawapay-p-500.png",
      "href": "https://pawapay.io",
      "altText": "pawaPay logo"
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.pawapay.cloud",
      "description": "pawaPay Merchant API sandbox"
    },
    {
      "url": "https://api.pawapay.cloud",
      "description": "pawaPay Merchant API production"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "payouts",
      "x-displayName": "Payouts"
    },
    {
      "name": "deposits",
      "x-displayName": "Deposits"
    },
    {
      "name": "refunds",
      "x-displayName": "Refunds"
    },
    {
      "name": "balance",
      "x-displayName": "Check Balance"
    },
    {
      "name": "payment-page",
      "x-displayName": "Payment Page"
    },
    {
      "name": "toolkit",
      "x-displayName": "Toolkit"
    },
    {
      "name": "wallet-balances",
      "x-displayName": "Wallet balances"
    },
    {
      "name": "payout_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Payout\" />\n",
      "x-displayName": "Payout Model"
    },
    {
      "name": "deposit_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Deposit\" />\n",
      "x-displayName": "Deposit Model"
    },
    {
      "name": "refund_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Refund\" />\n",
      "x-displayName": "Refund Model"
    },
    {
      "name": "paymentpage_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Session\" />\n",
      "x-displayName": "Payment Page Model"
    }
  ],
  "paths": {
    "/payouts": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Mobile Money Payout Request",
        "description": "***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nPayouts operation allows you to initiate a disbursement for asynchronous processing. Read more about [Payouts](#section/Payout-(Disbursement)).\n\n* This API call is <em>idempotent</em>, which means it is safe to submit a request with the same <code>payoutId</code> multiple times. \n* Duplicate requests with the same <code>payoutId</code> will be ignored with the `DUPLICATE_IGNORED` status in the <code>PayoutCreationResponse</code>.\n* Since the request can be rejected, you must check the <code>status</code> code in the <code>PayoutCreationResponse</code> for each submitted request. The <code>rejectionReason</code> in the <code>PayoutCreationResponse</code> will contain information about the reason of the rejection.\n\nEach request can become either ACCEPTED, ENQUEUED, REJECTED or DUPLICATE_IGNORED:\n\nStatus | Callback | Description\n-------|----------|------------\n`ACCEPTED` | Yes | The payout request has been **accepted** by pawaPay for processing.\n`ENQUEUED` | Yes | The payout request has been **accepted**, but has been enqueued for processing later. Read more about [enqueued payouts](#section/Payout-(Disbursement)/Enqueued-payouts).\n`REJECTED` | No | The payout request has been **rejected**. See <code>rejectionReason</code> for details. \n`DUPLICATE_IGNORED` | No | The payout request has been **ignored** as a duplicate of an already accepted payout request. Duplication logic relies upon payoutId.\n\n__Headers related to [signatures](#section/Using-the-API/Signatures) must only be included if you have enabled “Only accept signed requests”. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n\n### What next?\nAs the pawaPay Merchant API is an [asynchronous API](#section/Implementation/Asynchronous-API), you can find out the final status of the **accepted** payout by either:\n1. Configuring [callback URLs](#section/Using-the-API/Callback-URLs) and waiting for [payoutCallback](#operation/payoutWebhook) from pawaPay with the **final status**.\n2. Periodically polling the [Get Payout Status and Details](#operation/getPayout) endpoint for a **final status**.\n",
        "operationId": "createPayout",
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PayoutCreationRequest"
        },
        "responses": {
          "200": {
            "description": "Request has been accepted for processing by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreationResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "DUPLICATE_IGNORED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "DUPLICATE_IGNORED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": {
                        "rejectionCode": "AMOUNT_TOO_LARGE",
                        "rejectionMessage": "Amount should not be greater than 1000"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'amount'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payouts/bulk": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Mobile Money Bulk Payout Request",
        "description": "***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nBulk payouts operation allows you to initiate multiple disbursements for asynchronous processing.\nRead more about [Payouts](#section/Payout-(Disbursement)).\n\n* Bulk requests with more than 20 payout transactions can be rejected by pawaPay. \n* This API call is <em>idempotent</em>, which means it is safe to submit a request with the same <code>payoutId</code> multiple times. \n* Duplicate requests with the same <code>payoutId</code> will be ignored with the `DUPLICATE_IGNORED` status in the <code>PayoutCreationResponse</code>.\n* Since the request can be partially or fully rejected, you must check the <code>status</code> code in the <code>PayoutCreationResponse</code> for each submitted request. The <code>rejectionReason</code> in the <code>PayoutCreationResponse</code> will contain information about the reason of the rejection.\n* Callback will be delivered separately for each payout in the bulk request as the payouts are resolved to their final status.\n\nEach disbursement in a bulk request can become either ACCEPTED, ENQUEUED, REJECTED or DUPLICATE_IGNORED:\n\nStatus | Callback | Description\n-------|----------|------------\n`ACCEPTED` | Yes | The payout request has been **accepted** by pawaPay for processing.\n`ENQUEUED` | Yes | The payout request has been **accepted**, but has been enqueued for processing later. Read more about [enqueued payouts](#section/Payout-(Disbursement)/Enqueued-payouts).\n`REJECTED` | No | The payout request has been **rejected**. See `rejectionReason` for details.\n`DUPLICATE_IGNORED` | No | The payout request has been **ignored** as a duplicate of an already accepted payout request. Duplication logic relies upon payoutId.\n\n__Headers related to [signatures](#section/Using-the-API/Signatures) must only be included if you have enabled “Only accept signed requests”. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n\n### What next?\nAs the pawaPay Merchant API is an [asynchronous API](#section/Implementation/Asynchronous-API), you can find out the final status of the **accepted** payout by either:\n1. Configuring [callback URLs](#section/Using-the-API/Callback-URLs) and waiting for [payoutCallback](#operation/payoutWebhook) from pawaPay with the **final status**.\n2. Periodically polling the [Get Payout Status and Details](#operation/getPayout) endpoint for a **final status**.\n",
        "operationId": "createPayouts",
        "requestBody": {
          "$ref": "#/components/requestBodies/BulkPayoutCreationRequest"
        },
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayoutCreationResponse"
                  }
                },
                "examples": {
                  "Mixed Response": {
                    "value": [
                      {
                        "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                        "status": "ACCEPTED",
                        "created": "2020-10-19T11:17:01Z"
                      },
                      {
                        "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                        "status": "DUPLICATE_IGNORED",
                        "created": "2020-10-19T10:22:49Z"
                      },
                      {
                        "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                        "status": "REJECTED",
                        "rejectionReason": {
                          "rejectionCode": "AMOUNT_TOO_LARGE",
                          "ejectionMessage": "Amount should not be greater than 1000"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Missing Mandatory Field": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'amount'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payouts/{payoutId}": {
      "get": {
        "tags": [
          "payouts"
        ],
        "summary": "Get Payout Status and Details",
        "description": "Get payout status and details by the `payoutId` from your initial payout request. A list with at most one <code>Payout</code> is returned. \n\nThis operation can be used to verify the status of a payout.\n",
        "operationId": "getPayout",
        "parameters": [
          {
            "name": "payoutId",
            "in": "path",
            "description": "<code>payoutId</code> which has been specified in PayoutCreationRequest.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 36,
              "maxLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSearchResult"
                },
                "examples": {
                  "COMPLETED": {
                    "value": [
                      {
                        "payoutId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "COMPLETED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "receivedByRecipient": "2020-10-19T08:17:02Z",
                        "correspondentIds": {
                          "SOME_CORRESPONDENT_ID": "12356789"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "ACCEPTED": {
                    "value": [
                      {
                        "payoutId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "ACCEPTED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "ENQUEUED": {
                    "value": [
                      {
                        "payoutId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "ENQUEUED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "SUBMITTED": {
                    "value": [
                      {
                        "payoutId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "SUBMITTED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "FAILED": {
                    "value": [
                      {
                        "payoutId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "FAILED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260973456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "failureReason": {
                          "failureCode": "RECIPIENT_NOT_FOUND",
                          "failureMessage": "Recipient not found"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "Payout Not Found": {
                    "value": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payouts/resend-callback": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Resend callback",
        "description": "Resends the callback for a payout to your configured callback URL. The payout must have reached a final state. The callback delivery has to have failed already.\n\nPlease ensure your implementation of callback handling follows the guidelines in [Handling callbacks](#section/Implementation/Handling-callbacks).\n",
        "operationId": "payoutsResendCallback",
        "requestBody": {
          "$ref": "#/components/requestBodies/PayoutIdRequest"
        },
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutResendCallbackResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": "Payout with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
                    }
                  },
                  "FAILED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "FAILED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'payoutId'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payouts/fail-enqueued/{payoutId}": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Cancel Enqueued Payout",
        "description": "Cancels a payout that is currently in the ENQUEUED status. \nThe payment will be moved to FAILED status. \nThe payment will have the failure code `MANUALLY_CANCELLED`.\nIf you have configured callbacks, a callback will be sent. \n",
        "operationId": "payoutsFailEnqueued",
        "parameters": [
          {
            "name": "payoutId",
            "in": "path",
            "description": "<code>payoutId</code> which has been specified in PayoutCreationRequest.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 36,
              "maxLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailEnqueuedPayoutResponseDto"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": "Payout with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
                    }
                  },
                  "FAILED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "FAILED"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deposits": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Mobile Money Deposit Request",
        "description": "***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nDeposits operation allows you to initiate a collection for asynchronous processing.\nRead more about [Deposits](#section/Deposit-(Collection)).\n\n* This API call is <em>idempotent</em>, which means it is safe to submit a request with the same `depositId` multiple times. \n* Duplicate requests with the same `depositId` will be ignored with the `DUPLICATE_IGNORED` status in the <code>DepositCreationResponse</code>.\n* Since the request can rejected, you must check <code>status</code> code in the <code>DepositCreationResponse</code> for each submitted request. The <code>rejectionReason</code> in the <code>DepositCreationResponse</code> will contain information about the reason of the rejection.\n\nEach request can become either ACCEPTED, REJECTED or DUPLICATE_IGNORED:\n\nStatus | Callback | Description\n-------|----------|------------\n`ACCEPTED` | Yes | The deposit request has been **accepted** by pawaPay for processing.\n`REJECTED` | No | The deposit request has been **rejected**. See <code>rejectionReason</code> for details.\n`DUPLICATE_IGNORED` | No | The deposit request has been ignored as a duplicate of an already accepted deposit request. Duplication logic relies upon <code>depositId</code>.\n\n__Headers related to [signatures](#section/Using-the-API/Signatures) must only be included if you have enabled “Only accept signed requests”. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n\n### What next?\nAs the pawaPay Merchant API is an [asynchronous API](#section/Implementation/Asynchronous-API), you can find out the final status of the **accepted** deposit by either:\n1. Configuring [callback URLs](#section/Using-the-API/Callback-URLs) and waiting for [depositCallback](#operation/depositWebhook) from pawaPay with the **final status**.\n2. Periodically polling the [Get Deposit Status and Details](#operation/getDeposit) endpoint for a **final status**.\n",
        "operationId": "createDeposit",
        "requestBody": {
          "$ref": "#/components/requestBodies/DepositCreationRequest"
        },
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been accepted for processing by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositCreationResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "depositId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "DUPLICATE_IGNORED": {
                    "value": {
                      "depositId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "DUPLICATE_IGNORED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "depositId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": {
                        "rejectionCode": "AMOUNT_TOO_LARGE",
                        "rejectionMessage": "Amount should not be greater than 1000"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Missing Mandatory Field": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'amount'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deposits/{depositId}": {
      "get": {
        "tags": [
          "deposits"
        ],
        "summary": "Get Deposit Status and Details",
        "description": "Get deposit transaction status and details by `depositId` from your initial deposit request. A list with at most one `Deposit` is returned.\n\nThis operation can be used to verify the status of a deposit.\n",
        "operationId": "getDeposit",
        "parameters": [
          {
            "name": "depositId",
            "in": "path",
            "description": "The `depositId` of the deposit transaction.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 36,
              "maxLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositSearchResult"
                },
                "examples": {
                  "COMPLETED": {
                    "value": [
                      {
                        "depositId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "COMPLETED",
                        "requestedAmount": "123.00",
                        "depositedAmount": "123.00",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "payer": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "correspondent": "MTN_MOMO_ZMB",
                        "statementDescription": "To ACME company",
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "created": "2020-10-19T08:17:01Z",
                        "respondedByPayer": "2020-10-19T08:17:02Z",
                        "correspondentIds": {
                          "SOME_CORRESPONDENT_ID": "12356789"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "COMPLETED (Discrepancy)": {
                    "value": [
                      {
                        "depositId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "COMPLETED",
                        "requestedAmount": "200.00",
                        "depositedAmount": "1.00",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "payer": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "correspondent": "MTN_MOMO_ZMB",
                        "statementDescription": "To ACME company",
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "created": "2020-10-19T08:17:01Z",
                        "respondedByPayer": "2020-10-19T08:17:02Z",
                        "correspondentIds": {
                          "SOME_CORRESPONDENT_ID": "12356789"
                        },
                        "suspiciousActivityReport": [
                          {
                            "activityType": "AMOUNT_DISCREPANCY",
                            "comment": "There is a discrepancy between requested and actual deposit amount has been detected."
                          }
                        ],
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "ACCEPTED": {
                    "value": [
                      {
                        "depositId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "ACCEPTED",
                        "requestedAmount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "payer": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "correspondent": "MTN_MOMO_ZMB",
                        "statementDescription": "To ACME company",
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "SUBMITTED": {
                    "value": [
                      {
                        "depositId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "SUBMITTED",
                        "requestedAmount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "payer": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "correspondent": "MTN_MOMO_ZMB",
                        "statementDescription": "To ACME company",
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "FAILED": {
                    "value": [
                      {
                        "depositId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "FAILED",
                        "requestedAmount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "payer": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260961234567"
                          }
                        },
                        "correspondent": "MTN_MOMO_ZMB",
                        "statementDescription": "From ACME company",
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "created": "2020-10-19T08:17:01Z",
                        "failureReason": {
                          "failureCode": "PAYMENT_NOT_APPROVED",
                          "failureMessage": "Payment not approved"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "Deposit Not Found": {
                    "value": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deposits/resend-callback": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Resend callback",
        "description": "Resends the callback for a deposit to your configured callback URL. The deposit must have reached a final state. The callback delivery has to have failed already.\n\nPlease ensure your implementation of callback handling follows our guidelines in [Handling callbacks](#section/Implementation/Handling-callbacks).\n",
        "operationId": "depositsResendCallback",
        "requestBody": {
          "$ref": "#/components/requestBodies/DepositIdRequest"
        },
        "responses": {
          "200": {
            "description": "Request has been accepted for processing by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResendCallbackResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": "Deposit with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
                    }
                  },
                  "FAILED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "FAILED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'depositId'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/widget/sessions": {
      "post": {
        "tags": [
          "payment-page"
        ],
        "summary": "Deposit via Payment Page",
        "description": "Initiates a payment session using the pawaPay Payment Page. \nRead more about the [Payment Page](#section/Deposit-(Collection)/Payment-Page).\n\nThe request will return a `redirectURL`. \nThe customer should be forwarded to this URL to start the payment process.\nOnce the customer completes the payment process on the Payment Page, they will be fowarded to the `returnUrl`. \nThe original `depositId` will be passed as a query parameter.\n\nYour page on the `returnUrl` has two options to determine the status of the payment. \nYou can use the [Get Deposit Status and Details](#operation/getDeposit) to retrive the deposit associated with this session. Read more about [possible statuses of a payment](#section/Deposit-(Collection)).\nIf you have configured [callback URLs](#section/Using-the-API/Callback-URLs) you will receive a [callback](#operation/depositWebhook) to your configured callback URL when the payment reached its final status.\n\nThe customer experience of the Payment Page can be changed through the following parameters during initiation.\n\n| Parameter | Behaviour if specified | Behaviour if not specified |\n|-----------|------------------------|----------------------------|\n| `amount`  | The specified amount will be used for the collection. Customer is not able to change it. | The customer is able to enter the amount they wish to pay. For example, when depositing into their eWallet.\n| `msisdn`  | The collection will be initiated from the specified mobile money wallet. Customer is not able to change it. | The customer can specify the phone number of the mobile money wallet they wish to pay from..\n| `country` | The customer can pay only using a mobile money wallet from the specified country. | The customer can pay with a mobile money wallet from any country that is configured on your pawaPay account. You can use the [active configuration](#operation/active-conf) endpoint to verify which countries and MNOs have been configured for your account..\n| `reason`  | The reason will be shown to the customer on the Payment Page | The customer will not be shown what they are paying for.\n\n### What next?\nWhen the customer initiates a deposit from the payment page, the deposit will be avaialble in the system and can be handled the same way as deposits initiated with the Merchant API.        \nAs the pawaPay Merchant API is an [asynchronous API](#section/Implementation/Asynchronous-API), you can find out the final status of the **accepted** deposit by either:\n1. Configuring [callback URLs](#section/Using-the-API/Callback-URLs) and waiting for [depositCallback](#operation/depositWebhook) from pawaPay with the **final status**.\n2. Periodically polling the [Get Deposit Status and Details](#operation/getDeposit) endpoint for a **final status**.\n",
        "operationId": "create-session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Page session is created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "INVALID_INPUT": {
                    "value": {
                      "errorId": "94bd5e86-9bc4-4328-b128-c705f6496db8",
                      "errorCode": 1,
                      "errorMessage": "INVALID_INPUT: Missing required property 'returnUrl'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "value": {
                      "message": "Missing Authentication Token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "errorId": "94bd5e86-9bc4-4328-b128-c705f6496db8",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds": {
      "post": {
        "tags": [
          "refunds"
        ],
        "summary": "Mobile Money Refund Request",
        "description": "***Please follow the guidelines in the [Implementation](#section/Implementation) section of our API docs to ensure a reliable implementation.***\n\nRefunds operation allows you to initiate a refund for asynchronous processing.\nRead more about [Refunds](#section/Refunds).\n\n* This API call is <em>idempotent</em>, which means it is safe to submit a request with the same <code>refundId</code> multiple times. \n* Duplicate requests with the same <code>refundId</code> will be ignored with the `DUPLICATE_IGNORED` status in the <code>RefundCreationResponse</code>.\n* Since the request can be rejected, you must check the <code>status</code> code in the <code>RefundCreationResponse</code> for each submitted request. The <code>rejectionReason</code> in the <code>RefundCreationResponse</code> will contain information about the reason of the rejection.\n\nEach request can become either ACCEPTED, REJECTED or DUPLICATE_IGNORED:\n\nStatus | Callback | Description\n-------|----------|------------\n`ACCEPTED` | Yes | The refund request has been **accepted** by pawaPay for processing.\n`REJECTED` | No | The refund request has been **rejected**. See <code>rejectionReason</code> for details.\n`DUPLICATE_IGNORED` | No | The refund request has been ignored as a duplicate of an already accepted refund request. Duplication logic relies upon `refundId`.\n\n__Headers related to [signatures](#section/Using-the-API/Signatures) must only be included if you have enabled “Only accept signed requests”. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n\n### What next?\nAs the pawaPay Merchant API is an [asynchronous API](#section/Implementation/Asynchronous-API), you can find out the final status of the **accepted** refund by either:\n1. Configuring [callback URLs](#section/Using-the-API/Callback-URLs) and waiting for [refundCallback](#operation/refundWebhook) from pawaPay with the **final status**.\n2. Periodically polling the [Get Refund Status and Details](#operation/getRefund) endpoint for a **final status**.\n",
        "operationId": "createRefund",
        "requestBody": {
          "$ref": "#/components/requestBodies/RefundCreationRequest"
        },
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been accepted for processing by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundCreationResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "refundId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "DUPLICATE_IGNORED": {
                    "value": {
                      "refundId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "DUPLICATE_IGNORED",
                      "created": "2020-10-19T11:17:01Z"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "refundId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": {
                        "rejectionCode": "AMOUNT_TOO_LARGE",
                        "rejectionMessage": "Amount should not be greater than 1000"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'amount'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds/{refundId}": {
      "get": {
        "tags": [
          "refunds"
        ],
        "summary": "Get Refund Status and Details",
        "description": "Get refund transaction status and details by the `refundId` from your initial refund request. A list with at most one <code>Refund</code> is returned. \n\nThis operation can be used to verify the status of a refund. \n",
        "operationId": "getRefund",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "description": "<code>refundId</code> which has been specified in RefundCreationRequest.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 36,
              "maxLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundSearchResult"
                },
                "examples": {
                  "COMPLETED": {
                    "value": [
                      {
                        "refundId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "COMPLETED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "receivedByRecipient": "2020-10-19T08:17:02Z",
                        "correspondentIds": {
                          "SOME_CORRESPONDENT_ID": "12356789"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "ACCEPTED": {
                    "value": [
                      {
                        "refundId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "ACCEPTED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "SUBMITTED": {
                    "value": [
                      {
                        "refundId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "SUBMITTED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "FAILED": {
                    "value": [
                      {
                        "refundId": "8917c345-4791-4285-a416-62f24b6982db",
                        "status": "FAILED",
                        "amount": "123.45",
                        "currency": "ZMW",
                        "country": "ZMB",
                        "correspondent": "MTN_MOMO_ZMB",
                        "recipient": {
                          "type": "MSISDN",
                          "address": {
                            "value": "260763456789"
                          }
                        },
                        "customerTimestamp": "2020-10-19T08:17:00Z",
                        "statementDescription": "From ACME company",
                        "created": "2020-10-19T08:17:01Z",
                        "failureReason": {
                          "failureCode": "RECIPIENT_NOT_FOUND",
                          "failureMessage": "Recipient not found"
                        },
                        "metadata": {
                          "orderId": "ORD-123456789",
                          "customerId": "customer@email.com"
                        }
                      }
                    ]
                  },
                  "Refund Not Found": {
                    "value": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds/resend-callback": {
      "post": {
        "tags": [
          "refunds"
        ],
        "summary": "Resend callback",
        "description": "Resends the callback for a refund to your configured callback URL. The refund must have reached a final state. The callback delivery has to have failed already.\n\nPlease ensure your implementation of callback handling follows our guidelines in [Handling callbacks](#section/Implementation/Handling-callbacks).\n",
        "operationId": "refundsResendCallback",
        "requestBody": {
          "$ref": "#/components/requestBodies/RefundIdRequest"
        },
        "responses": {
          "200": {
            "description": "Request has been processed by pawaPay",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResendCallbackResponse"
                },
                "examples": {
                  "ACCEPTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "ACCEPTED"
                    }
                  },
                  "REJECTED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "REJECTED",
                      "rejectionReason": "Refund with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
                    }
                  },
                  "FAILED": {
                    "value": {
                      "payoutId": "f4401bd2-1568-4140-bf2d-eb77d2b2b639",
                      "status": "FAILED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Mandatory Field Missing": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input: Missing required property 'refundId'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/availability": {
      "get": {
        "tags": [
          "toolkit"
        ],
        "summary": "MNO Availability",
        "description": "Mobile Network Operators (MNOs) sometimes have instability in processing payments. Read more from [MNO Stability](#section/Implementation/MNO-stability).\n\nOur 24/7 payment operations team constantly monitors all the MNOs available on our platform for any degraded performance or downtime.\nFrom this endpoint you can get the current processing status of each MNO.\nThis endpoint returns all MNOs (correspondents) grouped by country. \nEach operation type has a separate status. \n\nFollowing statuses are possible for different operations:\n\nStatus | Description\n-------------------------------|------------\n`OPERATIONAL` | The MNO (correspondent) is operational and open for processing requests.\n`DELAYED` | The MNO (correspondent) is having problems processing payouts. Our payment operations team is currently monitoring the MNO. Payouts are being enqueued and will be processed once the problems have been resolved. \n`CLOSED` | The MNO (correspondent) is having problems and all requests are being rejected by pawaPay.\n",
        "operationId": "availability",
        "parameters": [],
        "responses": {
          "200": {
            "description": "If a request has been processed by pawaPay successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewaysAvailabilityStatusResult"
                },
                "examples": {
                  "Success": {
                    "value": [
                      {
                        "country": "GHA",
                        "correspondents": [
                          {
                            "correspondent": "VODAFONE_GHA",
                            "operationTypes": [
                              {
                                "operationType": "DEPOSIT",
                                "status": "OPERATIONAL"
                              },
                              {
                                "operationType": "PAYOUT",
                                "status": "DELAYED"
                              }
                            ]
                          },
                          {
                            "correspondent": "MTN_MOMO_GHA",
                            "operationTypes": [
                              {
                                "operationType": "DEPOSIT",
                                "status": "OPERATIONAL"
                              },
                              {
                                "operationType": "PAYOUT",
                                "status": "OPERATIONAL"
                              }
                            ]
                          },
                          {
                            "correspondent": "AIRTELTIGO_GHA",
                            "operationTypes": [
                              {
                                "operationType": "DEPOSIT",
                                "status": "CLOSED"
                              },
                              {
                                "operationType": "PAYOUT",
                                "status": "DELAYED"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "country": "ZMB",
                        "correspondents": [
                          {
                            "correspondent": "MTN_MOMO_ZMB",
                            "operationTypes": [
                              {
                                "operationType": "DEPOSIT",
                                "status": "CLOSED"
                              },
                              {
                                "operationType": "PAYOUT",
                                "status": "OPERATIONAL"
                              }
                            ]
                          },
                          {
                            "correspondent": "AIRTEL_OAPI_ZMB",
                            "operationTypes": [
                              {
                                "operationType": "DEPOSIT",
                                "status": "OPERATIONAL"
                              },
                              {
                                "operationType": "PAYOUT",
                                "status": "DELAYED"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "If a system error has occured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/wallet-balances": {
      "get": {
        "tags": [
          "wallet-balances"
        ],
        "summary": "Get wallet balances for all wallets",
        "description": "Allows you to get the list of wallets and their balances configured for your account. \n",
        "operationId": "wallet-balances",
        "responses": {
          "200": {
            "description": "Request has been succesfully processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckBalanceResponse"
                },
                "examples": {
                  "Successful": {
                    "value": {
                      "balances": [
                        {
                          "country": "ZMB",
                          "balance": "21798.03",
                          "currency": "ZMW",
                          "mno": ""
                        },
                        {
                          "country": "UGA",
                          "balance": "10798.03",
                          "currency": "UGX",
                          "mno": ""
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/wallet-balances/{country}": {
      "get": {
        "tags": [
          "wallet-balances"
        ],
        "summary": "Get wallet balances for a country",
        "description": "Allows you to get the wallet balances for a specific country configured for your account.\n\nYou can filter the results by the country of the wallet.\n",
        "operationId": "wallet-balances-for-country",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "description": "The country for which to get wallet balances for.\n\nFormat is ISO 3166-1 alpha-3, three character country code in upper case. Read more from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements.\n",
            "required": true,
            "schema": {
              "minLength": 3,
              "maxLength": 3,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been succesfully processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckBalanceResponse"
                },
                "examples": {
                  "Successful": {
                    "value": {
                      "balances": [
                        {
                          "country": "ZMB",
                          "balance": "21798.03",
                          "currency": "ZMW",
                          "mno": ""
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Request is rejected due to invalid country code (ZMB2)": {
                    "value": {
                      "errorId": "4f0d5e13-7e88-4cc6-827c-8c0640dc2cd3",
                      "errorCode": 1,
                      "errorMessage": "Invalid input ‘country’"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/active-conf": {
      "get": {
        "tags": [
          "toolkit"
        ],
        "summary": "Active Configuration",
        "description": "Allows you to query the MNOs that have been configured for your account. \nYou can also get supporting information about your configuration:\n* Your company name on your pawaPay account.\n* The currency for the MNO.\n* Minimum and maximum amount for deposits, payouts and refunds.\n* The name of the company that is shown to the customer on the SMS receipt.\n",
        "operationId": "active_conf",
        "parameters": [],
        "responses": {
          "200": {
            "description": "If a request has been processed by pawaPay successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerActiveConfigResponse"
                },
                "examples": {
                  "Success": {
                    "value": {
                      "merchantId": "MERCHANT_INC",
                      "merchantName": "Merchant Inc.",
                      "countries": [
                        {
                          "country": "GHA",
                          "correspondents": [
                            {
                              "correspondent": "AIRTELTIGO_GHA",
                              "currency": "GHS",
                              "ownerName": "Merchant Inc.",
                              "operationTypes": [
                                {
                                  "operationType": "DEPOSIT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "1000"
                                },
                                {
                                  "operationType": "PAYOUT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "1000"
                                },
                                {
                                  "operationType": "REFUND",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "1000"
                                }
                              ]
                            },
                            {
                              "correspondent": "MTN_MOMO_GHA",
                              "currency": "GHS",
                              "ownerName": "Merchant Inc.",
                              "operationTypes": [
                                {
                                  "operationType": "DEPOSIT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "2000"
                                },
                                {
                                  "operationType": "PAYOUT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "2000"
                                },
                                {
                                  "operationType": "REFUND",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "2000"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "country": "ZMB",
                          "correspondents": [
                            {
                              "correspondent": "AIRTEL_OAPI_ZMB",
                              "currency": "ZMW",
                              "ownerName": "pawaPay Zambia",
                              "operationTypes": [
                                {
                                  "operationType": "DEPOSIT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "10000"
                                }
                              ]
                            },
                            {
                              "correspondent": "MTN_MOMO_ZMB",
                              "currency": "ZMW",
                              "ownerName": "pawaPay Zambia",
                              "operationTypes": [
                                {
                                  "operationType": "DEPOSIT",
                                  "minTransactionLimit": "1",
                                  "maxTransactionLimit": "10000"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "If a system error has occured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "System Error": {
                    "value": {
                      "errorId": "d428a89e-fa8b-42b8-ba20-68be20d50af1",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/predict-correspondent": {
      "post": {
        "tags": [
          "toolkit"
        ],
        "operationId": "predict-correspondent",
        "summary": "Predict Correspondent",
        "description": "Predicts the correspondent (Mobile Network Operator) for the specified phone number (MSISDN). \n\nAverage misprediction rate when using this endpoint is 0.12%. \n\n__Please note! Benin has a relatively high level of number portability and therefore has an average misprediction rate of 6%.__\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MsisdnInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correspondent prediction was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrespondentPrediction"
                }
              }
            }
          },
          "400": {
            "description": "Request is rejected due to incompatibility with pawaPay API specification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "INVALID_INPUT": {
                    "value": {
                      "errorId": "94bd5e86-9bc4-4328-b128-c705f6496db8",
                      "errorCode": 1,
                      "errorMessage": "INVALID_INPUT: Missing required property 'msisdn'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authentication Failure": {
                    "value": {
                      "errorId": "cad1529e-040b-4c9d-a21d-2ba3056ff750",
                      "errorCode": 2,
                      "errorMessage": "Authentication error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authorization Failure. Please check your authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorization Failure": {
                    "value": {
                      "errorId": "daa495f0-541d-4192-b636-a8877b25a510",
                      "errorCode": 3,
                      "errorMessage": "Authorization error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "errorId": "94bd5e86-9bc4-4328-b128-c705f6496db8",
                      "errorCode": 0,
                      "errorMessage": "Internal error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/public-key/http": {
      "get": {
        "tags": [
          "toolkit"
        ],
        "summary": "Public Keys",
        "description": "Provides the public keys that are used to sign callbacks sent by pawaPay. Read more about how to use [signatures](#section/Using-the-API/Signatures).\n",
        "operationId": "public_key_http",
        "responses": {
          "200": {
            "description": "If a request has been processed by pawaPay successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyResponse"
                },
                "examples": {
                  "Success": {
                    "value": [
                      {
                        "id": "HTTP_EC_P256_KEY:1",
                        "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEYZe9jhnaZKw9ykMBe2IwRg6AgVMx\n2JRE3RMIdf4YazZTaQaUO19uDI5UO0QsTG699UeI+emd63/GY1PyOpf1rw==\n-----END PUBLIC KEY-----\n"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-webhooks": {
    "payoutCallback": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Payout Status Callback",
        "description": "If you have configured callbacks, pawaPay will `POST` a callback to your configured callback URL for each payout when it reaches a final status. \nRead more about [handling callbacks](#section/Implementation/Handling-callbacks) and [callback URLs](#section/Using-the-API/Callback-URLs).\n\nIf you have not configured callbacks, you can always call our [Get Payout Status and Details](/#operation/getPayout) endpoint to get the latest status and details of a specific payout request. \n\n__Headers related to [signatures](#section/Using-the-API/Signatures) will only be included if you have enabled \"Sign all callbacks\" from the portal. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n",
        "operationId": "payoutWebhook",
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when signature was created. This is a custom field and is not part of [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCallback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "depositCallback": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Deposit Status Callback",
        "description": "If you have configured callbacks, pawaPay will `POST` a callback to your configured callback URL for each deposit when it reaches a final status. \nRead more about [handling callbacks](#section/Implementation/Handling-callbacks) and [callback URLs](#section/Using-the-API/Callback-URLs).\n\nIf you have not configured callbacks, you can always call our [Get Deposit Status and Details](/#operation/getDeposit) endpoint to get the latest status and details of a specific deposit request. \n\n__Headers related to [signatures](#section/Using-the-API/Signatures) will only be included if you have enabled \"Sign all callbacks\" from the portal. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n",
        "operationId": "depositWebhook",
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when signature was created. This is a custom field and is not part of [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositCallback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Callback considered delivered."
          }
        }
      }
    },
    "refundCallback": {
      "post": {
        "tags": [
          "refunds"
        ],
        "summary": "Refund Status Callback",
        "description": "If you have configured callbacks, pawaPay will `POST` a callback to your configured callback URL for each refund when it reaches a final status. \nRead more about [handling callbacks](#section/Implementation/Handling-callbacks) and [callback URLs](#section/Using-the-API/Callback-URLs).\n\nIf you have not configured callbacks, you can always call our [Get Refund Status and Details](/#operation/getRefund) endpoint to get the latest status and details of a specific refund request. \n\n__Headers related to [signatures](#section/Using-the-API/Signatures) will only be included if you have enabled \"Sign all callbacks\" from the portal. Read more about it from our [portal documentation](https://pawapay.document360.io/docs/api-token).__\n",
        "operationId": "refundWebhook",
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "SHA-256 or SHA-512 hash of the request body."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature of the request according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Input",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Signature input according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Signature-Date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when signature was created. This is a custom field and is not part of [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Signature",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected signature algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Digest",
            "schema": {
              "type": "string",
              "format": "string",
              "description": "Expected digest algorithm of the response according to [RFC-9421](https://datatracker.ietf.org/doc/rfc9421/)."
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundCallback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MsisdnValue"
          }
        }
      },
      "MsisdnValue": {
        "type": "string",
        "description": "The phone number (MSISDN) of the payer or recipient.\nThe format is (https://en.wikipedia.org/wiki/MSISDN). MSISDN validation has following rules:\n * Only digits without whitespaces or any other separators or prefixes like '+'.\n * Should not start with zero.\n * Country code is mandatory.\n * Should not exceed or be less than the valid length of specified country.\n \n Valid examples for Zambia:\n `260763456789`\n \n Not valid examples for Zambia:\n `+260763456789`, `260 763 456789`, `260-7634-56789`, `0260763456789`, `2607634567`, `260763456789543`, `999558708954`, `37255870895`\n",
        "example": "260763456789"
      },
      "FlexibleMsisdnValue": {
        "type": "string",
        "description": "The phone number (MSISDN) to predict the correspondent of.\nMust contain the country code.\n\nThe input will be sanitized by:\n* removing the leading + sign\n* removing all whitespace\n* removing non-numeric characters\n",
        "example": "+260 763-456789"
      },
      "PredictedMsisdnValue": {
        "type": "string",
        "description": "The correctly formatted phone number (MSISDN) from your original request that is in a valid format for the rest of the pawaPay Merchant API.\n",
        "example": "260763456789"
      },
      "Amount": {
        "minLength": 1,
        "maxLength": 23,
        "type": "string",
        "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
        "description": "The amount to be collected or disbursed. \n\nAmount has to follow below requirements or the request will be **rejected**:\n* Between zero and two decimal places can be supplied, depending on what the specific MNO supports. Learn about all [MNO supported decimal places](#section/Using-the-API/Correspondents).\n* The maximum amount depends on the limits of the specific MNO. You can find them from the [Active Configuration](#operation/active_conf) endpoint.\n* The minimum amount depends on the limits of the specific MNO. You can find them from the [Active Configuration](#operation/active_conf) endpoint.\n* Leading zeroes are not permitted except where the value is less than 1. For any value less than one, one and only one leading zero must be supplied.\n* Trailing zeroes are permitted.\n\nValid examples:\n`5`, `5.0`, `5.00`, `5.5`, `5.55`, `5555555`, `0.5`\n\nNot valid examples:\n`5.`, `5.555`, `5555555555555555555`, `.5`, `-5.5`, `00.5`, `00.00`, `00001.32`\n",
        "example": "15"
      },
      "Correspondent": {
        "type": "string",
        "description": "The correspondent code refers to the specific MNO that the specified phone number (MSISDN) has an active mobile money wallet with. \n\nYou can find all the supported correspondents [listed here](#section/Using-the-API/Correspondents). \n\nThe [active configuration](#operation/active_conf) endpoint provides the list of correspondents configured for your account.\n\nYou can use the [predict correspondent](#operation/predict-correspondent) enpoint to predict the correct correspondent to use based on the phone number (MSISDN).\n",
        "example": "MTN_MOMO_ZMB"
      },
      "Country": {
        "type": "string",
        "description": "The country in which the MNO operates. \n\nFormat is ISO 3166-1 alpha-3, three character country code in upper case. Read more from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements.\n",
        "example": "ZMB"
      },
      "Currency": {
        "type": "string",
        "description": "The currency in which the `amount` is specified.\n\nFormat must be the ISO 4217 three character currency code in upper case. Read more from https://en.wikipedia.org/wiki/ISO_4217#Active_codes.\n\nYou can find all the supported currencies that the specific `correspondent` supports [from here](#section/Using-the-API/Correspondents).\n\nThe [active configuration](#operation/active_conf) endpoint provides the list of correspondents configured for your account together with the currencies.\n",
        "example": "ZMW"
      },
      "Deposit": {
        "required": [
          "depositId",
          "status",
          "requestedAmount",
          "currency",
          "country",
          "correspondent",
          "payer",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the deposit.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/DepositStatus"
          },
          "requestedAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "payer": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the deposit process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the deposit was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "depositedAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "respondedByPayer": {
            "type": "string",
            "description": "When the MNO responded to this deposit request. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The unqiue ID for this financial transaction assigned by the MNO.",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "suspiciousActivityReport": {
            "$ref": "#/components/schemas/SuspiciousDepositTransactionReport"
          },
          "failureReason": {
            "$ref": "#/components/schemas/DepositFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "DepositCallback": {
        "required": [
          "depositId",
          "status",
          "requestedAmount",
          "currency",
          "country",
          "correspondent",
          "payer",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the deposit.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/CallbackStatus"
          },
          "requestedAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "payer": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the deposit process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the deposit was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "depositedAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "respondedByPayer": {
            "type": "string",
            "description": "When the MNO responded to this deposit request. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The unqiue ID for this financial transaction assigned by the MNO.",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "suspiciousActivityReport": {
            "$ref": "#/components/schemas/SuspiciousDepositTransactionReport"
          },
          "failureReason": {
            "$ref": "#/components/schemas/DepositFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "DepositCreationRequest": {
        "required": [
          "depositId",
          "amount",
          "currency",
          "correspondent",
          "payer",
          "customerTimestamp",
          "statementDescription"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the deposit.",
            "example": "<INSERT_UUID_FOR_DEPOSIT>"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "payer": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp of when the deposit was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer on the PIN prompt, in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "preAuthorisationCode": {
            "minLength": 1,
            "maxLength": 36,
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$",
            "description": "For MNOs (correspondents) that use a preauthorisation code instead of a PIN prompt for authorising the deposit."
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataRequest"
          }
        }
      },
      "CheckBalanceRequest": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "string",
            "description": "ISO3 country codes",
            "example": [
              "ZMB",
              "UGA"
            ]
          }
        }
      },
      "CheckBalanceResponse": {
        "required": [
          "balances"
        ],
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletState"
            },
            "description": "List of wallet balances"
          }
        }
      },
      "WalletState": {
        "required": [
          "country",
          "balance",
          "currency",
          "mno"
        ],
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "format": "text",
            "description": "Country of the wallet.\n\nFormat is ISO 3166-1 alpha-3, three character country code in upper case. Read more from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements.\n",
            "example": "ZMB"
          },
          "balance": {
            "type": "string",
            "description": "The current balance of the wallet.",
            "example": "1000.0"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the wallet.",
            "format": "text",
            "example": "ZMW"
          },
          "mno": {
            "type": "string",
            "description": "If you are using a wallet that is only used by a single MNO, that MNO-s correspondent code will be shown here.",
            "example": "MTN_MOMO_BEN"
          }
        }
      },
      "DepositIdRequest": {
        "required": [
          "depositId"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID previously specified by you, that uniquely identifies the deposit.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          }
        }
      },
      "DepositCreationResponse": {
        "required": [
          "depositId",
          "status"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `depositId` of the deposit transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/DepositCreationStatus"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the deposit was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/DepositRejectionReason"
          }
        }
      },
      "DepositResendCallbackResponse": {
        "required": [
          "depositId",
          "status"
        ],
        "type": "object",
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the deposit.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/ManualCommandStatus"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Human-readable explanation why request has been rejected",
            "example": "Deposit with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
          }
        }
      },
      "DepositCreationStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the `Deposit`: \n* `ACCEPTED` - The deposit request has been **accepted** by pawaPay for processing. \n* `REJECTED` - The deposit request has been **rejected**. See `rejectionReason` for details \n* `DUPLICATE_IGNORED` - This deposit request is a duplicate and will be ignored.\n",
        "enum": [
          "ACCEPTED",
          "REJECTED",
          "DUPLICATE_IGNORED"
        ]
      },
      "DepositFailureReason": {
        "required": [
          "failureCode"
        ],
        "type": "object",
        "properties": {
          "failureCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure: \n* `PAYER_NOT_FOUND` - The phone number specified as the Payer does not belong to the MNO specified as the correspondent. \n* `PAYMENT_NOT_APPROVED` - Payer did not approve the payment. \n* `PAYER_LIMIT_REACHED` - Payer has reached a transaction limit of their mobile money wallet. \n* `INSUFFICIENT_BALANCE` - Payer does not have enough funds. \n* `TRANSACTION_ALREADY_IN_PROCESS` - Payer already has an unfinalized transaction being processed by the MNO. \n* `OTHER_ERROR` - Any other error. Please refer to `failureMessage`.\n",
            "example": "OTHER_ERROR",
            "enum": [
              "PAYER_NOT_FOUND",
              "PAYMENT_NOT_APPROVED",
              "PAYER_LIMIT_REACHED",
              "INSUFFICIENT_BALANCE",
              "TRANSACTION_ALREADY_IN_PROCESS",
              "OTHER_ERROR"
            ]
          },
          "failureMessage": {
            "type": "string",
            "description": "Additional optional failure message",
            "example": "Payers address is blocked"
          }
        }
      },
      "DepositRejectionReason": {
        "required": [
          "rejectionReason"
        ],
        "type": "object",
        "properties": {
          "rejectionCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure:\n* `INVALID_PAYER_FORMAT` - The payer address (phone number) is invalid.\n* `INVALID_CORRESPONDENT` - The specified correspondent is not supported.\n* `INVALID_AMOUNT` - The specified amount is not supported. \n* `AMOUNT_TOO_SMALL` - The specified amount is smaller than the minumum allowed by the MNO specified as the correspondent. \n* `AMOUNT_TOO_LARGE` - The specified amount is larger than the maximum allowed by the MNO specified as the correspondent. \n* `INVALID_CURRENCY` - The specified currency is not supported for the MNO specified as the correspondent. \n* `INVALID_COUNTRY` - The specified country is not supported for this MNO specified as the correspondent. \n* `PARAMETER_INVALID` - One or more parameters are invalid. \n* `INVALID_INPUT` - We were unable to parse the payload of the request. \n* `DEPOSITS_NOT_ALLOWED` - Deposits are not allowed for the merchant or the MNO specified as the correspondent.\n* `CORRESPONDENT_TEMPORARILY_UNAVAILABLE` - The MNO specified as the correspondent is currently experiencing an outage and processing of payments has been temporarily halted. Please refer to our [Status Page](https://status.pawapay.cloud) for live information about MNO availability.\n",
            "example": "INVALID_AMOUNT",
            "enum": [
              "INVALID_PAYER_FORMAT",
              "INVALID_CORRESPONDENT",
              "INVALID_AMOUNT",
              "AMOUNT_TOO_SMALL",
              "AMOUNT_TOO_LARGE",
              "INVALID_CURRENCY",
              "INVALID_COUNTRY",
              "PARAMETER_INVALID",
              "INVALID_INPUT",
              "DEPOSITS_NOT_ALLOWED",
              "CORRESPONDENT_TEMPORARILY_UNAVAILABLE"
            ]
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Additional optional rejection message",
            "example": "You don't have access to this correspondent"
          }
        }
      },
      "DepositSearchResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Deposit"
        }
      },
      "DepositStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the deposit: \n* `ACCEPTED` - The deposit request has been **accepted** by pawaPay for processing. \n* `SUBMITTED` - The deposit request has been submitted to the MNO and is being processed. \n* `COMPLETED` - The deposit request has been successfully processed. This is a **final state.**\n* `FAILED` - The deposit request has been proceessed, but failed. This is a **final state.**\n",
        "enum": [
          "ACCEPTED",
          "SUBMITTED",
          "COMPLETED",
          "FAILED"
        ]
      },
      "CallbackStatus": {
        "type": "string",
        "description": "The final status of the payment.\n* `COMPLETED` - The payment has been successfully processed.\n* `FAILED` - The payment request has been proceessed, but failed.\n",
        "enum": [
          "COMPLETED",
          "FAILED"
        ]
      },
      "SuspiciousDepositTransactionReport": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SuspiciousDepositTransactionReportEntry"
        }
      },
      "SuspiciousDepositTransactionReportEntry": {
        "required": [
          "activityType",
          "comment"
        ],
        "type": "object",
        "properties": {
          "activityType": {
            "type": "string",
            "description": "Represents a suspicious activity category.\n\n* <code>AMOUNT_DISCREPANCY</code> - Indicates that there is a discrepancy between requested and actual deposit amount.",
            "example": "AMOUNT_DISCREPANCY",
            "enum": [
              "AMOUNT_DISCREPANCY"
            ]
          },
          "comment": {
            "type": "string",
            "example": "There is a discrepancy between requested and actual deposit amount."
          }
        }
      },
      "CreateSession": {
        "type": "object",
        "required": [
          "depositId",
          "returnUrl"
        ],
        "properties": {
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the deposit.",
            "example": "<INSERT_UUID_FOR_DEPOSIT>"
          },
          "returnUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://merchant.com/paymentProcessed",
            "description": "The URL to which the user will be redirected after completion of the operation."
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "amount": {
            "minLength": 1,
            "maxLength": 23,
            "type": "string",
            "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
            "description": "If specified, the amount will be displayed to the collection as the collection amount. For example, when paying for specific goods or services.\n\nIf not specified, the customer will have to specify the amount they wish to pay. For example, when depositing money into their eWallet.\n\nAmount has to follow below requirements or the request will be **rejected**:\n* Between zero and two decimal places can be supplied, depending on what the specific MNO supports. Learn about all [MNO supported decimal places](#section/Using-the-API/Correspondents).\n* The maximum amount depends on the limits of the specific MNO. You can find them from the [Active Configuration](#operation/active_conf) endpoint.\n* The minimum amount depends on the limits of the specific MNO. You can find them from the [Active Configuration](#operation/active_conf) endpoint.\n* Leading zeroes are not permitted except where the value is less than 1. For any value less than one, one and only one leading zero must be supplied.\n* Trailing zeroes are permitted.\n\nValid examples:\n  `5`, `5.0`, `5.00`, `5.5`, `5.55`, `5555555`, `0.5`\n\nNot valid examples:\n  `5.`, `5.555`, `5555555555555555555`, `.5`, `-5.5`, `00.5`, `00.00`, `00001.32`\n",
            "example": "15"
          },
          "msisdn": {
            "type": "string",
            "description": "The phone number (MSISDN) of the payer or recipient.\n\nIf specified, this phone number will be used to collect the deposit. If not specified, the customer paying can specify the phone number that they want to pay from.\n\nThe format is (https://en.wikipedia.org/wiki/MSISDN). MSISDN validation has following rules:\n * Only digits without whitespaces or any other separators or prefixes like '+'.\n * Should not start with zero.\n * Country code is mandatory.\n * Should not exceed or be less than the valid length of specified country.\n \n Valid examples for Ghana:\n `233558708954`\n \n Not valid examples for Ghana:\n `+233558708954`, `233 558 708954`, `233-558-708954`, `0233558708954`, `233558708`, `233558708954872`, `999558708954`, `37255870895`\n",
            "example": "233593456789"
          },
          "country": {
            "type": "string",
            "description": "If specifified, allows payment from phone numbers only from a specific country. \nIf not specified, the customer can select any country that is configured for your account in pawaPay. \n\nYou can use the [active configuration](#operation/active-conf) endpoint to verify which counrties and MNOs have been configured for your account. \n\nFormat must be the ISO 3166-1 alpha-3, three character country code in upper case. Read more from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements.\n",
            "example": "ZMB"
          },
          "reason": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "An optional text which will be displayed to the customer on the payment page to specify what they are paying for.",
            "example": "Ticket to festival"
          }
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "The unique URL of the payment page for this specific payment session. Customer has to be forwarded to this URL where they can complete the payment. \nThe session is valid for 15 minutes for the customer to complete the payment.\n\n**Please note! The URL is valid for 5 minutes.**\n",
            "example": "https://paywith.pawapay.io/?token=AgV4aA3ZxKfGcdMIo6a6Upf7X2MRptdFUrc6Oi3U53CxC0YAkAADABVhd3MtY3J5cHRvLXB1YmxpYy1rZXkAREFzdDR5WktOeWVTRTZ5bTdhVTJJeno3bG1ydkFYenFpUWZqNVQxbGQ2RUgweEpkZVZ0cWJGM3hwMzI1VWN6VGxEdz09AAdwdXJwb3NlAA5jcmVhdGUtc2Vzc2lvbgAFc3RhZ2UAD3NpZ24tY2xvdWRmcm9udAACAAdhd3Mta21zAE5hcm46YXdzOmttczpldS1jZW50cmFsLTE6MTAxOTQ0Mzc3ODY2OmtleS82ZTgzZmVjMS00MWRhLTQxMWQt"
          }
        }
      },
      "GatewayAvailabilityOperationType": {
        "type": "string",
        "description": "The type of financial operation for which the operation status applies.  \n* `PAYOUT` -  Relates to payout (disbursement) and refund transactions. \n* `DEPOSIT` - Relates to deposit (collection) transactions.\n",
        "enum": [
          "PAYOUT",
          "DEPOSIT"
        ]
      },
      "GatewayAvailabilityStatus": {
        "type": "string",
        "description": "Possible operation statuses for correspondents and their operation types: \n* `OPERATIONAL` -  The MNO (correspondent) is operational and open for processing requests.\n* `DELAYED` - The MNO (correspondent) is having problems processing payouts. Our payment operations team is currently monitoring the MNO. Payouts are being enqueued and will be processed once the problems have been resolved.  \n* `CLOSED` - The MNO (correspondent) is having problems and all requests are being rejected by pawaPay.\n",
        "enum": [
          "OPERATIONAL",
          "DELAYED",
          "CLOSED"
        ]
      },
      "GatewayAvailabilityOperationTypeResult": {
        "required": [
          "operationType",
          "status"
        ],
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/GatewayAvailabilityOperationType"
          },
          "status": {
            "$ref": "#/components/schemas/GatewayAvailabilityStatus"
          }
        }
      },
      "GatewayAvailabilityCorrespondentResult": {
        "required": [
          "correspondent",
          "operationTypes"
        ],
        "type": "object",
        "properties": {
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "operationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GatewayAvailabilityOperationTypeResult"
            }
          }
        }
      },
      "GatewayAvailabilityStatusResult": {
        "required": [
          "country",
          "correspondents"
        ],
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GatewayAvailabilityCorrespondentResult"
            }
          }
        }
      },
      "GatewaysAvailabilityStatusResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GatewayAvailabilityStatusResult"
        }
      },
      "ErrorResponse": {
        "required": [
          "errorId",
          "errorCode",
          "errorMessage"
        ],
        "type": "object",
        "properties": {
          "errorId": {
            "maxLength": 36,
            "type": "string",
            "description": "A unique error ID in the pawaPay platform.",
            "example": "63743264-7292-11ea-bc55-0242ac130003"
          },
          "errorCode": {
            "type": "integer",
            "description": "pawaPay internal error code.",
            "example": 1
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message.",
            "example": "Internal error"
          }
        }
      },
      "FinancialAddress": {
        "required": [
          "address",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of financial address. At the moment, only **MSISDN** is supported as the financial address. ",
            "example": "MSISDN",
            "enum": [
              "MSISDN"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/AddressValue"
          }
        },
        "description": "The phone number (MSISDN) of the recipient or payer must be specified as the <code>value</code> of the <code>address</code>"
      },
      "Payout": {
        "required": [
          "payoutId",
          "status",
          "amount",
          "currency",
          "country",
          "correspondent",
          "recipient",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A payout identifier which has been specified in <code>PayoutCreationRequest</code>.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "recipient": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the payout process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the payout was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "receivedByRecipient": {
            "type": "string",
            "description": "When the payment was received by the recipient. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The unqiue ID for this financial transaction assigned by the MNO.",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "failureReason": {
            "$ref": "#/components/schemas/PayoutFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "PayoutCallback": {
        "required": [
          "payoutId",
          "status",
          "amount",
          "currency",
          "country",
          "correspondent",
          "recipient",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A payout identifier which has been specified in <code>PayoutCreationRequest</code>.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/CallbackStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "recipient": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the payout process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the payout was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "receivedByRecipient": {
            "type": "string",
            "description": "When the payment was received by the recipient. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6).",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The unqiue ID for this financial transaction assigned by the MNO.",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "failureReason": {
            "$ref": "#/components/schemas/PayoutFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "PayoutCreationRequest": {
        "required": [
          "payoutId",
          "amount",
          "currency",
          "correspondent",
          "recipient",
          "customerTimestamp",
          "statementDescription"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the payout.",
            "example": "<INSERT_UUID_FOR_PAYOUT>"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "recipient": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the payout process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataRequest"
          }
        }
      },
      "PayoutIdRequest": {
        "required": [
          "payoutId"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID previously specified by you, that uniquely identifies the payout.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          }
        }
      },
      "PayoutCreationResponse": {
        "required": [
          "payoutId",
          "status"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `payoutId` of the payout transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutCreationStatus"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the payout was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/PayoutRejectionReason"
          }
        }
      },
      "PayoutResendCallbackResponse": {
        "required": [
          "payoutId",
          "status"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `payoutId` of the payout transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/ManualCommandStatus"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Human-readable explanation why request has been rejected",
            "example": "Payout with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
          }
        }
      },
      "FailEnqueuedPayoutResponseDto": {
        "required": [
          "payoutId",
          "status"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `payoutId` of the payout transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/ManualCommandStatus"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Human-readable explanation why request has been rejected",
            "example": "Payout with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
          }
        }
      },
      "PayoutCreationStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the Payout Creation: \n* `ACCEPTED` - The payout request has been **accepted** by pawaPay for processing.\n* `ENQUEUED` - The payout request has been **accepted**, but has been enqueued for processing later. Read more about [enqueued payouts](#section/Payout-(Disbursement)/Enqueued-payouts).\n* `REJECTED` - The payout request has been **rejected** by pawaPay. See rejectionReason for details. \n* `DUPLICATE_IGNORED` - The payout request has been **ignored** as a duplicate of already accepted payout request. Duplication logic relies upon payoutId.\n",
        "enum": [
          "ACCEPTED",
          "ENQUEUED",
          "REJECTED",
          "DUPLICATE_IGNORED"
        ]
      },
      "PayoutFailureReason": {
        "required": [
          "failureCode"
        ],
        "type": "object",
        "properties": {
          "failureCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure: \n* `BALANCE_INSUFFICIENT` - The pawaPay wallet balance is insufficient to proceed with the payout. \n* `RECIPIENT_NOT_FOUND` - The financial address (phone number) specified as the receipient does not belong to the MNO specified as the correspodent. \n* `RECIPIENT_NOT_ALLOWED_TO_RECEIVE` - The recipient has reached a limit on their wallet that stops them from being able to accept this payout. \n* `MANUALLY_CANCELLED` - The payout request was enqueued and subsequently cancelled from your pawaPay portal or through the [Cancel Enqueued Payout](#operation/payoutsFailEnqueued) endpoint.\n* `OTHER_ERROR` - Any other error. Please refer to `failureMessage`.\n",
            "example": "OTHER_ERROR",
            "enum": [
              "BALANCE_INSUFFICIENT",
              "RECIPIENT_NOT_FOUND",
              "RECIPIENT_NOT_ALLOWED_TO_RECEIVE",
              "MANUALLY_CANCELLED",
              "OTHER_ERROR"
            ]
          },
          "failureMessage": {
            "type": "string",
            "description": "Additional optional failure message",
            "example": "Recipient's address is blocked"
          }
        }
      },
      "PayoutRejectionReason": {
        "required": [
          "rejectionReason"
        ],
        "type": "object",
        "properties": {
          "rejectionCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure: \n* `BALANCE_INSUFFICIENT` - The balance of your pawaPay wallet does not have the funds to initiate this payout.\n* `INVALID_CORRESPONDENT` - The specified correspondent is not supported.\n* `INVALID_RECIPIENT_FORMAT` - The phone number (MISISDN) specified for the recipient is in an unrecognizable format.\n* `INVALID_AMOUNT`- The specified amount is not supported. \n* `AMOUNT_TOO_SMALL` - The specified amount is smaller than the minimum allowed by the MNO specified as the correspondent. \n* `AMOUNT_TOO_LARGE` - The specified amount is larger than the maximum allowed by the MNO specified as the correspondent. \n* `INVALID_CURRENCY` - The specified currency is not supported by the MNO specified as the correspondent. \n* `INVALID_COUNTRY` - The specified country is not supported for the MNO specified as the correspondent. \n* `PARAMETER_INVALID` - One or more parameters are invalid. \n* `INVALID_INPUT` - We were was unable to parse the payload of the request. \n* `PAYOUTS_NOT_ALLOWED` - Payouts are not allowed for this merchant or the MNO specified as the correspondent.\n* `CORRESPONDENT_TEMPORARILY_UNAVAILABLE` - The MNO specified as the correspondent is currently experiencing an outage and processing of payments has been temporarily halted. Please refer to our [Status Page](https://status.pawapay.cloud) for live information about MNO availability.\n",
            "example": "INVALID_AMOUNT",
            "enum": [
              "BALANCE_INSUFFICIENT",
              "INVALID_CORRESPONDENT",
              "INVALID_RECIPIENT_FORMAT",
              "INVALID_AMOUNT",
              "AMOUNT_TOO_SMALL",
              "AMOUNT_TOO_LARGE",
              "INVALID_CURRENCY",
              "INVALID_COUNTRY",
              "PARAMETER_INVALID",
              "INVALID_INPUT",
              "PAYOUTS_NOT_ALLOWED",
              "CORRESPONDENT_TEMPORARILY_UNAVAILABLE"
            ]
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Additional optional rejection message",
            "example": "You don't have access to this correspondent (MNO)"
          }
        }
      },
      "PayoutSearchResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Payout"
        }
      },
      "PayoutStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the payout: \n* `ACCEPTED` - The payout request has been **accepted** by pawaPay for processing. \n* `ENQUEUED` - The payout request has been **accepted**, but has been enqueued for processing later. Read more about [enqueued payouts](#section/Payout-(Disbursement)/Enqueued-payouts). \n* `SUBMITTED` - The payout request has been submitted to the MNO and is being processed.\n* `COMPLETED` - The payout request has been successfully processed. This is a **Final state.**\n* `FAILED` - The payout request has been processed, but failed. **Final state.**\n",
        "enum": [
          "ACCEPTED",
          "SUBMITTED",
          "ENQUEUED",
          "COMPLETED",
          "FAILED"
        ]
      },
      "Refund": {
        "required": [
          "refundId",
          "status",
          "amount",
          "currency",
          "country",
          "correspondent",
          "recipient",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that unqiuely identifies the refund.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "recipient": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the refund process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the refund was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "receivedByRecipient": {
            "type": "string",
            "description": "When the payment was received by the recipient. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The financial ids used by the MNO to unqiuely identify this payment",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "failureReason": {
            "$ref": "#/components/schemas/RefundFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "RefundCallback": {
        "required": [
          "refundId",
          "status",
          "amount",
          "currency",
          "country",
          "correspondent",
          "recipient",
          "customerTimestamp",
          "created"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that unqiuely identifies the refund.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/CallbackStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "recipient": {
            "$ref": "#/components/schemas/FinancialAddress"
          },
          "customerTimestamp": {
            "type": "string",
            "description": "The timestamp for when you initiated the refund process. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:28Z"
          },
          "statementDescription": {
            "minLength": 4,
            "maxLength": 22,
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "description": "Short description for the transaction. Depending on the specific MNO performing the transaction this message may be visible to the customer in the SMS receipt or within their transaction history.",
            "example": "Note of 4 to 22 chars"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the refund was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "receivedByRecipient": {
            "type": "string",
            "description": "When the payment was received by the recipient. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:30Z"
          },
          "correspondentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The financial ids used by the MNO to unqiuely identify this payment",
            "example": {
              "MTN_INIT": "ABC123",
              "MTN_FINAL": "DEF456"
            }
          },
          "failureReason": {
            "$ref": "#/components/schemas/RefundFailureReason"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataResponse"
          }
        }
      },
      "RefundCreationRequest": {
        "required": [
          "refundId",
          "depositId"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID specified by you, that uniquely identifies the refund.",
            "example": "<INSERT_UUID_FOR_REFUND>"
          },
          "depositId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `depositId` of the deposit to be refunded.",
            "example": "<INSERT_UUID_OF_DEPOSIT_TO_REFUND>"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "metadata": {
            "$ref": "#/components/schemas/TransactionMetadataRequest"
          }
        }
      },
      "RefundIdRequest": {
        "required": [
          "refundId"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "A UUIDv4 based ID previously specified by you, that uniquely identifies the refund.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          }
        }
      },
      "RefundCreationResponse": {
        "required": [
          "refundId",
          "status"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `refundId` of the refund transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/RefundCreationStatus"
          },
          "created": {
            "type": "string",
            "description": "The timestamp of when the refund was created in the pawaPay platform. Format defined by 'date-time' in RFC3339 section 5.6 (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time",
            "example": "2020-02-21T17:32:29Z"
          },
          "rejectionReason": {
            "$ref": "#/components/schemas/RefundRejectionReason"
          }
        }
      },
      "RefundResendCallbackResponse": {
        "required": [
          "refundId",
          "status"
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "minLength": 36,
            "maxLength": 36,
            "type": "string",
            "format": "uuid",
            "description": "The `refundId` of the refund transaction.",
            "example": "f4401bd2-1568-4140-bf2d-eb77d2b2b639"
          },
          "status": {
            "$ref": "#/components/schemas/ManualCommandStatus"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Human-readable explanation why request has been rejected",
            "example": "Refund with ID \\#f4401bd2-1568-4140-bf2d-eb77d2b2b639 not found"
          }
        }
      },
      "RefundCreationStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the Refund Creation: \n* `ACCEPTED` - The refund request has been **accepted** by pawaPay for processing. \n* `REJECTED` - The refund request has been **rejected** by pawaPay. See `rejectionReason` for details. \n* `DUPLICATE_IGNORED` - The refund request has been **ignored** as a duplicate of already accepted refund request. Duplication logic relies upon refundId.\n",
        "enum": [
          "ACCEPTED",
          "REJECTED",
          "DUPLICATE_IGNORED"
        ]
      },
      "RefundFailureReason": {
        "required": [
          "failureCode"
        ],
        "type": "object",
        "properties": {
          "failureCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure: \n* `BALANCE_INSUFFICIENT` - The pawaPay wallet balance is insufficient to proceed with the refund. \n* `RECIPIENT_NOT_FOUND` - The phone number specified for the receipient does not belong to the MNO specified as the correspodent. \n* `RECIPIENT_NOT_ALLOWED_TO_RECEIVE` - The recipient has reached a limit on their wallet that stops them from receiving this refund. \n* `OTHER_ERROR` - Any other error. Please refer to `failureMessage`.\n",
            "example": "OTHER_ERROR",
            "enum": [
              "BALANCE_INSUFFICIENT",
              "RECIPIENT_NOT_FOUND",
              "RECIPIENT_NOT_ALLOWED_TO_RECEIVE",
              "OTHER_ERROR"
            ]
          },
          "failureMessage": {
            "type": "string",
            "description": "Additional optional failure message",
            "example": "Recipient's address is blocked"
          }
        }
      },
      "RefundRejectionReason": {
        "required": [
          "rejectionReason"
        ],
        "type": "object",
        "properties": {
          "rejectionCode": {
            "type": "string",
            "description": "Enumeration presenting details in case of failure:  \n* `DEPOSIT_NOT_FOUND`- Requested deposit for refund has not been found.  \n* `DEPOSIT_NOT_COMPLETED`- Requested deposit was not completed.  \n* `ALREADY_REFUNDED`- Requested deposit has been already refunded.  \n* `IN_PROGRESS`- Another refund transaction is already in progress.  \n* `INVALID_AMOUNT`- The specified amount is not supported. \n* `AMOUNT_TOO_SMALL` - The specified amount is smaller than the minimum allowed by the MNO specified as the correspondent. \n* `AMOUNT_TOO_LARGE` - The specified amount is larger than the maximum allowed by the MNO specified as the correspondent. \n* `INVALID_CURRENCY` - The specified currency is not supported by the MNO specified as the correspondent. \n* `INVALID_COUNTRY` - The specified country is not supported for the MNO specified as the correspondent. \n* `PARAMETER_INVALID` - One or more parameters are invalid. \n* `INVALID_INPUT` - We were was unable to parse the payload of the request. \n* `REFUNDS_NOT_ALLOWED` - Refunds are not allowed for this merchant or the MNO specified as the correspondent.\n* `CORRESPONDENT_TEMPORARILY_UNAVAILABLE` - The MNO specified as the correspondent is currently experiencing an outage and processing of payments has been temporarily halted. Please refer to our [Status Page](https://status.pawapay.cloud) for live information about MNO availability.\n",
            "example": "INVALID_AMOUNT",
            "enum": [
              "DEPOSIT_NOT_FOUND",
              "DEPOSIT_NOT_COMPLETED",
              "ALREADY_REFUNDED",
              "IN_PROGRESS",
              "INVALID_AMOUNT",
              "AMOUNT_TOO_SMALL",
              "AMOUNT_TOO_LARGE",
              "PARAMETER_INVALID",
              "INVALID_INPUT",
              "REFUNDS_NOT_ALLOWED",
              "CORRESPONDENT_TEMPORARILY_UNAVAILABLE"
            ]
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Additional optional rejection message",
            "example": "You don't have access to this correspondent (MNO)"
          }
        }
      },
      "RefundSearchResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Refund"
        }
      },
      "ManualCommandStatus": {
        "type": "string",
        "description": "Enumeration presenting the status of the manual command action: \n* `ACCEPTED` - The manual action request has been accepted by pawaPay for processing. \n* `REJECTED` - The manual action request has been rejected by pawaPay. See rejectionReason for details. \n* `FAILED` - The manual action request has failed during submitting for processing due to internal reasons.\n",
        "enum": [
          "ACCEPTED",
          "REJECTED",
          "FAILED"
        ]
      },
      "CustomerActiveConfigResponse": {
        "required": [
          "merchantId",
          "merchantName",
          "countries"
        ],
        "type": "object",
        "properties": {
          "merchantId": {
            "type": "string",
            "description": "Your unique alphanumeric ID in the pawaPay platform.",
            "example": "MERCHANT_INC"
          },
          "merchantName": {
            "type": "string",
            "description": "Your company name as configured in the pawaPay platform.",
            "example": "Merchant Inc."
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerActiveCountryConfigResponse"
            }
          }
        }
      },
      "CustomerActiveCountryConfigResponse": {
        "required": [
          "country",
          "correspondents"
        ],
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "correspondents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerActiveGatewayConfigResponse"
            }
          }
        }
      },
      "CustomerActiveGatewayConfigResponse": {
        "required": [
          "correspondent",
          "currency",
          "operationTypes"
        ],
        "type": "object",
        "properties": {
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "ownerName": {
            "type": "string",
            "description": "The name of the company that is shown to the customer on the SMS receipt."
          },
          "operationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerActiveOperationTypeConfigResponse"
            }
          }
        }
      },
      "CustomerActiveOperationTypeConfigResponse": {
        "required": [
          "operationType",
          "minTransactionLimit",
          "maxTransactionLimit"
        ],
        "type": "object",
        "properties": {
          "operationType": {
            "type": "string",
            "example": "DEPOSIT",
            "enum": [
              "DEPOSIT",
              "PAYOUT",
              "PUSH_DEPOSIT",
              "REFUND"
            ]
          },
          "minTransactionLimit": {
            "type": "string",
            "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
            "description": "Minimum transaction amount allowed for this correspondent for this operation type.",
            "example": "1.0000"
          },
          "maxTransactionLimit": {
            "type": "string",
            "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
            "description": "Maximum transaction amount allowed for this correspondent for this operation type.",
            "example": "10000.0000"
          }
        }
      },
      "MsisdnInput": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "msisdn": {
            "$ref": "#/components/schemas/FlexibleMsisdnValue"
          }
        }
      },
      "CorrespondentPrediction": {
        "required": [
          "country",
          "operator",
          "correspondent",
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "operator": {
            "type": "string",
            "description": "The name of the MNO associated with the specified MSISDN.",
            "example": "MTN"
          },
          "correspondent": {
            "$ref": "#/components/schemas/Correspondent"
          },
          "msisdn": {
            "$ref": "#/components/schemas/PredictedMsisdnValue"
          }
        }
      },
      "PublicKeyResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PublicKeyResponseItem"
        }
      },
      "PublicKeyResponseItem": {
        "required": [
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the public key."
          },
          "key": {
            "type": "string",
            "description": "The public key to use when verifying the signature in a callback sent by pawaPay."
          }
        }
      },
      "TransactionMetadataRequest": {
        "description": "A list of metadata that you can attach to the payment for providing additional context about the payment.\nFor example, adding `orderId` to indicate for which order this payment was for or `customerId` to know which customer this payment pertains to.\n\nMetadata will not be visible to the customer that is party to this payment. \nIt will be visible in the portal on the payment details page and in your financial statements as a JSON object to support automated reconciliation.\nIt is also possible to search for recent payments in the portal using global search based on the values of metadata.\n\nUp to 10 metadata fields can be attached to a payment. \n",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TransactionMetadataRequestItem"
        },
        "example": [
          {
            "fieldName": "orderId",
            "fieldValue": "ORD-123456789"
          },
          {
            "fieldName": "customerId",
            "fieldValue": "customer@email.com",
            "isPII": true
          }
        ]
      },
      "TransactionMetadataRequestItem": {
        "required": [
          "fieldName",
          "fieldValue"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "The name of the metadata that you are attaching to the payment. For example `orderId`.",
            "example": "orderId"
          },
          "fieldValue": {
            "type": "string",
            "description": "The value for this metadata field. For example `ORD-123456789`.",
            "example": "ORD-123456789"
          },
          "isPII": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the field contains personally identifiable information. Used for enabling compliance with GDPR or other relevant data privacy laws.",
            "example": true
          }
        }
      },
      "TransactionMetadataResponse": {
        "description": "The metadata that was provided in the original initation request in a JSON object format.\n",
        "type": "object",
        "properties": {
          "value of fieldName": {
            "type": "string",
            "description": "Each passed in metadata field will be a property of the metadata JSON object. The key will be the 'fieldName' and the value will be 'fieldValue'."
          }
        },
        "example": {
          "orderId": "ORD-123456789",
          "customerId": "customer@email.com"
        }
      }
    },
    "requestBodies": {
      "DepositCreationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DepositCreationRequest"
            }
          }
        },
        "required": true
      },
      "DepositIdRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DepositIdRequest"
            }
          }
        }
      },
      "CheckBalanceRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckBalanceRequest"
            }
          }
        },
        "required": true
      },
      "PayoutCreationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PayoutCreationRequest"
            }
          }
        },
        "required": true
      },
      "BulkPayoutCreationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PayoutCreationRequest"
              }
            }
          }
        },
        "required": true
      },
      "PayoutIdRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PayoutIdRequest"
            }
          }
        }
      },
      "RefundCreationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefundCreationRequest"
            }
          }
        },
        "required": true
      },
      "RefundIdRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefundIdRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "See [Authentication](/#section/Using-the-API/Authentication).",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "API Reference",
      "tags": [
        "payouts",
        "deposits",
        "refunds",
        "payment-page",
        "wallet-balances",
        "toolkit"
      ]
    }
  ]
}